<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>https://lovetoken.github.io/</link>
    <atom:link href="https://lovetoken.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 18 Sep 2016 21:54:31 +0900</pubDate>
    <lastBuildDate>Sun, 18 Sep 2016 21:54:31 +0900</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>R에서 lubridate package 에 대해</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://cran.r-project.org/web/packages/lubridate/lubridate.pdf&quot;&gt;lubridate package&lt;/a&gt; 는 Garrett Grolemund 와 Hadley Wickham 외 8명의 힘이 더해져 만들어진 날짜처리 생산성 패키지이다.&lt;/p&gt;
&lt;p&gt;날짜(Date) &amp;amp; 시각(Time) 데이터는 전 세계 사람들에 의해 보편적으로 정해진 규칙이 있는데, 이 규칙을 정확하게 알지 못하고 데이터를 처리할 때 혼돈이 일어날 수 있다.&lt;br /&gt;
의외로 위에서 말한 규칙들은 따지고 보면 따져볼수록 많고 복잡하여 인간이 실수할 수 있을 여지가 높다.&lt;br /&gt;
흠 이런 예제랄까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어느 연도가 윤년이어서 2월 29일이 있는지 신경 쓰지 않으면 알 수 없다.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;4월 31일 데이터셋 정의 (그런 날짜는 존재하지 않는데도 불구하고)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 것 외에도 우리가 접할 수 있는 여러 가지 상황을 가정 해 볼 수 있는데&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;분석 시 기준 Timezone 이 변경될 경우&lt;/li&gt;
&lt;li&gt;날짜와 시각이 조합된 데이터의 산술연산이 필요할 경우&lt;/li&gt;
&lt;li&gt;(정말 특이한 사례지만) &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%BC%EA%B4%91_%EC%A0%88%EC%95%BD_%EC%8B%9C%EA%B0%84%EC%A0%9C&quot;&gt;일광절약시간제&lt;/a&gt;에 해당되는 Time index 가 존재할 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등 날짜시각 데이터셋에 대한 처리 시 우리를 괴롭힐 만한 요소들은 차고 넘친다.&lt;/p&gt;
&lt;p&gt;이 실수들과 장애물들을 사전에 방지하기 위한 다양한 R 패키지가 제공되고 있다.&lt;br /&gt;
내가 아는 것을 기준으론 &lt;a href=&quot;https://cran.r-project.org/web/packages/xts/xts.pdf&quot;&gt;xts&lt;/a&gt;, &lt;a href=&quot;https://cran.r-project.org/web/packages/zoo/zoo.pdf&quot;&gt;zoo&lt;/a&gt;, lubridate, &lt;a href=&quot;https://cran.r-project.org/web/packages/chron/chron.pdf&quot;&gt;chron&lt;/a&gt; 의 패키지 정도를 알고 있으되, 자주 사용하는 패키지는 xts 이었다.&lt;/p&gt;
&lt;p&gt;이번에 살펴볼 &lt;a href=&quot;https://cran.r-project.org/web/packages/lubridate/lubridate.pdf&quot;&gt;lubridate package&lt;/a&gt; 는 lubricate(기름을 치다, 기름을 바르다, 원활히 하다) 의 &amp;quot;lubri&amp;quot; 와 &amp;quot;date&amp;quot; 를 합성시킨 것으로 추측되는데 이처럼 날짜시각 데이터를 원활하게 가공하는 데 도움을 주기 위한 목적으로 특화된 느낌을 받는다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;&lt;em&gt;l&lt;/em&gt;&lt;em&gt;u&lt;/em&gt;&lt;em&gt;b&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;&lt;em&gt;i&lt;/em&gt; + &lt;em&gt;d&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;xts, zoo 패키지 조합 역시 강력하지만 강력한 만큼 친숙함은 주지 못한 것 같다.&lt;br /&gt;
이러한 단점을 보완하고자 부가적으로 알아야 하겠다고 마음먹게 된 패키지 중 하나이었고,&lt;br /&gt;
R studio 의 Hadley Wickham 에 의해 유지보수 되고 있다고 해서 그 때문에 공부를 시작하기도 한 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lubridate is an R package that makes it easier to work with dates and times.&lt;br /&gt;
- &lt;a href=&quot;https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html&quot;&gt;Do more with dates and times in R with lubridate 1.3.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;얼마나 기존방법보다 쉬운지를 내가 겪었던 시행착오와 곁들여&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(lubridate)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;를 실행 후 한 번 탐색해 보겠다.&lt;/p&gt;
&lt;h2 id=&quot;dates-times-객체-만들기&quot;&gt;dates &amp;amp; times 객체 만들기&lt;/h2&gt;
&lt;h3 id=&quot;date-객체-만들기&quot;&gt;Date 객체 만들기&lt;/h3&gt;
&lt;p&gt;R에서 2011년 6월 4일 날짜 데이터를 만들려면 가장 기본적인 방법이 아래의 코드일 것이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-6-4&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011/06/04&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
## 
## as.Date(&amp;quot;20110604&amp;quot;) # error&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;R의 가장 전통적인 날짜 데이터 class 는 Date 일 것이다.&lt;br /&gt;
마지막 코드 &lt;code&gt;as.Date(&amp;quot;20110604&amp;quot;)&lt;/code&gt; 와 같이 에러가 나는 코드도 한번 작성해 보았는데&lt;br /&gt;
이처럼 날짜 데이터셋을 만들기 위해 문자열을 input 하는 방식으로 사용할 경우 문자열을 어떠한 양식에 따라 작성할 것인지도 사람마다 제각각이고 그에 따라 코드가 실행되지 않는 경우가 발생할 것이다.&lt;br /&gt;
그 양식 중 &lt;code&gt;&amp;quot;20110604&amp;quot;&lt;/code&gt; 와 같이 딜리미터가 없는 문자열은 &lt;code&gt;as.Date()&lt;/code&gt; 가 날짜로 변환할 때&lt;br /&gt;
어디가 year 이고 month 이며 day 인지 알 수 없어한다.&lt;/p&gt;
&lt;p&gt;또한&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;06-04-2011&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;0006-04-20&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;처럼 미국식 날짜 표기법을 사용할 경우에도 마찬가지 문제가 발생한다.&lt;/p&gt;
&lt;p&gt;이번엔 lubridate package 의 &amp;quot;y&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;d&amp;quot; 심볼을 이용한 함수들을 이용해 보겠다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011/06/04&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;y&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;d&amp;quot; 심볼이라고 소개했는데 각각 year, month, day 로 이해할 수 있고&lt;br /&gt;
이 심볼의 순서를 바꾸어도 먹히는 함수들이 사전에 준비되어 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;mdy&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;06/04/2011&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;06/04/2011&amp;quot; 은 2011년 6월 4일을 미국식으로 날짜 표기한 것인데, 이를 제대로 인식하기 위해서 심볼들의 순서를 그에 맞춘 함수를 이용하면 되겠다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;dmy&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;04/06/2011&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;문자열 양식에는 어느정도의 관용이 있는지 살펴보았다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011/06/04&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;20110604&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;110604&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;11.06.04&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;11,06,04&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;11_06.04&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# ?&lt;/span&gt;
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011  06  04&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# ㅋㅋ?&lt;/span&gt;
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011!?06??!04&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# !?&lt;/span&gt;
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011 =06??04&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# -_-?&lt;/span&gt;
## [1] &amp;quot;2011-06-04&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;11 No 06 way 04&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# No way!&lt;/span&gt;
## [1] &amp;quot;2011-06-04&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lubridate package 설명서에는&lt;br /&gt;
&lt;strong&gt;heterogeneous format(불균일한 양식)&lt;/strong&gt;에 대한 다양한 준비들이 되어있음을 강조한 문구가 담겨 있는 걸 보았다.&lt;br /&gt;
이처럼 인간의 실수는 웬만하면 커버할 듯한 위용이다.&lt;/p&gt;
&lt;h3 id=&quot;dates-times-객체-만들기-1&quot;&gt;Dates + Times 객체 만들기&lt;/h3&gt;
&lt;p&gt;&amp;quot;2011년 6월 4일&amp;quot; 에 구체적인 시각까지 더해서&lt;br /&gt;
&amp;quot;2011년 6월 4일 13시 30분 50초&amp;quot; 를 R에서 만들어 보겠다.&lt;/p&gt;
&lt;p&gt;시각까지 더해진 정보는 Date class 로 정보를 담을 수 없다.&lt;br /&gt;
즉 &lt;code&gt;as.Date()&lt;/code&gt; 함수로 2011년 6월 4일 13시 30분 50초 정보를 만들 수 없다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.Date&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13:30:50&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# 시각정보가 사라짐&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이때부턴 포직스(POSIX) 클래스를 대중적으로 이용하는것으로 알고 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13:30:50&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 13:30:50 KST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번엔 lubridate package 의 경우이다.&lt;br /&gt;
lubridate package 에는 &amp;quot;y&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;d&amp;quot; 심볼 뿐만 아니라 &amp;quot;h&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;s&amp;quot; 역시 준비되어 있다.&lt;br /&gt;
각각 hour, minute, second 로 이해할 수 있다.&lt;br /&gt;
위의 설명했던 대로 &amp;quot;y&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;d&amp;quot; 와 &amp;quot;h&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;s&amp;quot; 를 잘 조합하여 사용하면&lt;br /&gt;
비교적 편하게 &amp;quot;2011년 6월 4일 13시 30분 50초&amp;quot; 정보를 담을 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13:30:50&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 13:30:50 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;as.POSIXct()&lt;/code&gt; 와 비교해볼 때 날짜시각 객체를 만드는 방법이 별반 틀릴 것이 없다.&lt;br /&gt;
만 조금 더 융통성이 있게 사용할 수 있는 점들이 몇 가지 눈에 띈다.&lt;/p&gt;
&lt;p&gt;만약 분,초 단위의 정보가 없는 경우 &amp;quot;2011년 6월 4일 13시&amp;quot; 의 정보가 투입된다고 가정하면 어떨까?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd_h&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 13:00:00 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ymd_hms()&lt;/code&gt; 에서 &amp;quot;m&amp;quot;, &amp;quot;s&amp;quot; 심볼을 제외한 &lt;code&gt;ymd_h()&lt;/code&gt; 함수를 이용해 파싱하면 된다.&lt;br /&gt;
하지만 &lt;code&gt;as.POSIXct()&lt;/code&gt; 으로 &lt;code&gt;&amp;quot;2011-06-04 13&amp;quot;&lt;/code&gt; 를 파싱하는 방법은 조금 고민을 해야하거나 투입되는 문자열 자체를 사전에 건드려야 하는 과정이 필요하다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# No&lt;/span&gt;
## [1] &amp;quot;2011-06-04 KST&amp;quot;
&lt;span class=&quot;kw&quot;&gt;as.POSIXct&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13:00:00&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# Yes&lt;/span&gt;
## [1] &amp;quot;2011-06-04 13:00:00 KST&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 예시로 볼 때 lubridate package 는 사용자 관점으로 친숙한 도구들이 어럿 준비되어 있다.&lt;br /&gt;
이외에도 heterogeneous format 에 대한 대비 역시 날짜 + 시각 데이터에도 적용된다.&lt;/p&gt;
&lt;h2 id=&quot;부분정보-추출-extracting-information&quot;&gt;부분정보 추출 (Extracting information)&lt;/h2&gt;
&lt;p&gt;lubridate package 에는 부분정보를 추출하기 위한 간편 함수들이 여럿 준비되어 있다.&lt;br /&gt;
&lt;code&gt;second()&lt;/code&gt;, &lt;code&gt;minute()&lt;/code&gt;, &lt;code&gt;hour()&lt;/code&gt;, &lt;code&gt;day()&lt;/code&gt;, &lt;code&gt;wday()&lt;/code&gt;, &lt;code&gt;yday()&lt;/code&gt;, &lt;code&gt;week()&lt;/code&gt;, &lt;code&gt;month()&lt;/code&gt;, &lt;code&gt;year()&lt;/code&gt; 처럼 함수명칭도 상식적으로 이해하기 쉬운 것들이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ld1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2011-06-04 13:30:50&amp;quot;&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;year&lt;/span&gt;(ld1)
## [1] 2011
&lt;span class=&quot;kw&quot;&gt;month&lt;/span&gt;(ld1)
## [1] 6
&lt;span class=&quot;kw&quot;&gt;day&lt;/span&gt;(ld1)
## [1] 4
&lt;span class=&quot;kw&quot;&gt;wday&lt;/span&gt;(ld1)
## [1] 7
&lt;span class=&quot;kw&quot;&gt;yday&lt;/span&gt;(ld1)
## [1] 155
&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(ld1)
## [1] 13
&lt;span class=&quot;kw&quot;&gt;minute&lt;/span&gt;(ld1)
## [1] 30
&lt;span class=&quot;kw&quot;&gt;second&lt;/span&gt;(ld1)
## [1] 50&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;특히 month, wday 의 경우 &lt;code&gt;label&lt;/code&gt; 인자를 가지고 있는데 이를 &lt;code&gt;TRUE&lt;/code&gt; 로 설정할 경우에&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;month&lt;/span&gt;(ld1, &lt;span class=&quot;dt&quot;&gt;label =&lt;/span&gt; T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] Jun
## 12 Levels: Jan &amp;lt; Feb &amp;lt; Mar &amp;lt; Apr &amp;lt; May &amp;lt; Jun &amp;lt; Jul &amp;lt; Aug &amp;lt; Sep &amp;lt; ... &amp;lt; Dec&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;wday&lt;/span&gt;(ld1, &lt;span class=&quot;dt&quot;&gt;label =&lt;/span&gt; T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] Sat
## Levels: Sun &amp;lt; Mon &amp;lt; Tues &amp;lt; Wed &amp;lt; Thurs &amp;lt; Fri &amp;lt; Sat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;월, 요일의 명칭을 factor 로 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;부분정보-수정&quot;&gt;부분정보 수정&lt;/h3&gt;
&lt;p&gt;&amp;quot;2011년 6월 4일 13:30:50&amp;quot; 로 저장되어있던 &lt;code&gt;ld1&lt;/code&gt; 에 대해 시각(hour)을 10시로 바꾸려면 어떻게 하여야 할까?&lt;br /&gt;
내가볼 때 가장 간단한 방법은 부분정보 추출시 사용했던 간편함수들과 assign 연산자를 조합시켜 변경하는 방법이다.&lt;br /&gt;
아래처럼 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(ld1) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
ld1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 10:30:50 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;update()&lt;/code&gt; 제너릭 함수를 사용할 수도 있는데, 엄밀히 말하면 &lt;code&gt;update.POSIXt()&lt;/code&gt; 함수를 이용하는 방법도 있다.&lt;br /&gt;
아래 코드는 &lt;code&gt;update()&lt;/code&gt; 함수를 이용해 10시로 변경된 &lt;code&gt;ld1&lt;/code&gt; 을 다시 13로 되돌리는 코드이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ld1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;(ld1, &lt;span class=&quot;dt&quot;&gt;hour =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;)
ld1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 13:30:50 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;POSIXlt class 인 경우엔 &lt;code&gt;$&lt;/code&gt; 와 assign operator 를 조합해 사용할 수 있는데 이 또한 매력적인 방법이라 생각된다.&lt;br /&gt;
하지만 아쉽게도 &lt;code&gt;ld1&lt;/code&gt; 는 POSIXct class 이므로 &lt;code&gt;$&lt;/code&gt; 가 바로 먹히지는 않는다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ld1$hour &lt;span class=&quot;co&quot;&gt;# error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;굳이 &lt;code&gt;$&lt;/code&gt; 과 assign operator 를 조합해 사용하고 싶다면 &lt;code&gt;as.POSIXlt()&lt;/code&gt; 를 한번 거쳐야 할 것이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ld2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.POSIXlt&lt;/span&gt;(ld1)
ld2$hour &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
ld2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 10:30:50 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;날짜시각에-대한-산술연산&quot;&gt;날짜시각에 대한 산술연산&lt;/h2&gt;
&lt;p&gt;lubridate 와 같은 패키지를 공부하는 목적 중 가장 중요한 특징이 아닐까 싶다.&lt;br /&gt;
날짜 + 시각에 대한 산술연산은 매우 민감하고도, 생각보다 짜증 나는 문제이다.&lt;/p&gt;
&lt;p&gt;사과 30개가 있는데, 사과 2개를 더하면 32개가 된다.&lt;br /&gt;
1월 30일인데, 2틀을 더하면(지나면) 32일이 될까?&lt;br /&gt;
개인적으론 32일이 되어버렸으면 좋겠지만 32일이란 건 존재하지 않는다. 2월 1일이 된다.&lt;/p&gt;
&lt;p&gt;나처럼 단순무식한 것을 좋아하는 사람에겐 날짜 + 시각에 대한 산술연산은 많은 피로도를 줄 수 있다.&lt;br /&gt;
lubridate package 는 이를 예방할 수 있는 강력한 함수들이 많이 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2016-01-30&amp;quot;&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;days&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2016-02-01&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 코드는 1월 30일인데, 2틀을 더하면(지나면)&lt;br /&gt;
의 문제를 풀어주는 코드이다.&lt;/p&gt;
&lt;p&gt;특정기간이 지나면 무슨일이 되는지 이렇게 산술연산이 가능하다.&lt;/p&gt;
&lt;p&gt;지금까지 단일시점 한개의 날짜시각 데이터를 가지고 놀았는데&lt;br /&gt;
이런 식으로 R의 Vectorization 특징을 활용하여 복수개의 시점을 만들 수도 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2016-01-30&amp;quot;&lt;/span&gt;) -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;days&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;2016-01-29&amp;quot; &amp;quot;2016-01-28&amp;quot; &amp;quot;2016-01-27&amp;quot; &amp;quot;2016-01-26&amp;quot; &amp;quot;2016-01-25&amp;quot;
##  [6] &amp;quot;2016-01-24&amp;quot; &amp;quot;2016-01-23&amp;quot; &amp;quot;2016-01-22&amp;quot; &amp;quot;2016-01-21&amp;quot; &amp;quot;2016-01-20&amp;quot;
## [11] &amp;quot;2016-01-19&amp;quot; &amp;quot;2016-01-18&amp;quot; &amp;quot;2016-01-17&amp;quot; &amp;quot;2016-01-16&amp;quot; &amp;quot;2016-01-15&amp;quot;
## [16] &amp;quot;2016-01-14&amp;quot; &amp;quot;2016-01-13&amp;quot; &amp;quot;2016-01-12&amp;quot; &amp;quot;2016-01-11&amp;quot; &amp;quot;2016-01-10&amp;quot;
## [21] &amp;quot;2016-01-09&amp;quot; &amp;quot;2016-01-08&amp;quot; &amp;quot;2016-01-07&amp;quot; &amp;quot;2016-01-06&amp;quot; &amp;quot;2016-01-05&amp;quot;
## [26] &amp;quot;2016-01-04&amp;quot; &amp;quot;2016-01-03&amp;quot; &amp;quot;2016-01-02&amp;quot; &amp;quot;2016-01-01&amp;quot; &amp;quot;2015-12-31&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잠깐 &lt;code&gt;days()&lt;/code&gt; 함수명칭을 살펴보자.&lt;br /&gt;
위에서 부분정보 추출 간편함수중 &lt;code&gt;day()&lt;/code&gt; 가 있었는데 마지막에 &amp;quot;s&amp;quot; 가 붙음으로써 쓰임이 달라진 것을 볼 수 있다.&lt;br /&gt;
&lt;code&gt;days()&lt;/code&gt; 뿐만 아니라 &lt;code&gt;seconds()&lt;/code&gt;, &lt;code&gt;minutes()&lt;/code&gt;, &lt;code&gt;hours()&lt;/code&gt;, &lt;code&gt;weeks()&lt;/code&gt;, &lt;code&gt;years()&lt;/code&gt;, &lt;code&gt;milliseconds()&lt;/code&gt;, &lt;code&gt;microseconds()&lt;/code&gt;, &lt;code&gt;nanoseconds()&lt;/code&gt;, &lt;code&gt;picoseconds()&lt;/code&gt; 의 함수들이 이와 같은 산술연산에서 사용할 수 있는 패밀리이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html&quot;&gt;Do more with dates and times in R with lubridate 1.3.0&lt;/a&gt; 에서 꽤 감명깊은(?) 예제를 발견했는데&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ymd&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2013-01-31&amp;quot;&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;months&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;2013-01-31&amp;quot; NA           &amp;quot;2013-03-31&amp;quot; NA           &amp;quot;2013-05-31&amp;quot;
##  [6] NA           &amp;quot;2013-07-31&amp;quot; &amp;quot;2013-08-31&amp;quot; NA           &amp;quot;2013-10-31&amp;quot;
## [11] NA           &amp;quot;2013-12-31&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;월 중에 31일이이 존재하지 않는 월이 어디인지를 알 수 있게 된다.&lt;/p&gt;
&lt;h2 id=&quot;lubridate-와-dplyr-간의-조합&quot;&gt;lubridate 와 dplyr 간의 조합&lt;/h2&gt;
&lt;p&gt;lubridate 이든 xts 이든 간에&lt;br /&gt;
결국은 이러한 Time index 정보들이 담긴 Table 형태에 정보들을 가공하고 처리하게 될 가능성이 매우 높다.&lt;br /&gt;
dplyr package 와 조합해 현업에서 어떻게 시너지를 일으킬 지를&lt;br /&gt;
보잘것없는 예제를 통해 조금이나마 확인해 보고 싶다.&lt;br /&gt;
lubridate package 에 내장된 데이터셋 &lt;code&gt;lakers&lt;/code&gt; 를 이용해 보았다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr)
&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt;(lakers)

lakers &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df
lakers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34,624 &amp;lt;U+00D7&amp;gt; 13
##        date opponent game_type  time period      etype  team
##       &amp;lt;int&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1  20081028      POR      home 12:00      1  jump ball   OFF
## 2  20081028      POR      home 11:39      1       shot   LAL
## 3  20081028      POR      home 11:37      1    rebound   LAL
## 4  20081028      POR      home 11:25      1       shot   LAL
## 5  20081028      POR      home 11:23      1    rebound   LAL
## 6  20081028      POR      home 11:22      1       shot   LAL
## 7  20081028      POR      home 11:22      1       foul   POR
## 8  20081028      POR      home 11:22      1 free throw   LAL
## 9  20081028      POR      home 11:00      1       foul   LAL
## 10 20081028      POR      home 10:53      1       shot   POR
## # ... with 34,614 more rows, and 6 more variables: player &amp;lt;chr&amp;gt;,
## #   result &amp;lt;chr&amp;gt;, points &amp;lt;int&amp;gt;, type &amp;lt;chr&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 보면 &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; 변수가 서로 나뉘어 있다.&lt;br /&gt;
이를 지금까지 배운 lubridate 함수들을 이용하여 통합시켜 관리해보고 싶었다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lakers &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;mutate&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;date =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(date, time) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;ymd_hm) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rename&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;time_index =&lt;/span&gt; date) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;select&lt;/span&gt;(-time)

lakers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 34,624 &amp;lt;U+00D7&amp;gt; 12
##             time_index opponent game_type period      etype  team
##                 &amp;lt;dttm&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1  2008-10-28 12:00:00      POR      home      1  jump ball   OFF
## 2  2008-10-28 11:39:00      POR      home      1       shot   LAL
## 3  2008-10-28 11:37:00      POR      home      1    rebound   LAL
## 4  2008-10-28 11:25:00      POR      home      1       shot   LAL
## 5  2008-10-28 11:23:00      POR      home      1    rebound   LAL
## 6  2008-10-28 11:22:00      POR      home      1       shot   LAL
## 7  2008-10-28 11:22:00      POR      home      1       foul   POR
## 8  2008-10-28 11:22:00      POR      home      1 free throw   LAL
## 9  2008-10-28 11:00:00      POR      home      1       foul   LAL
## 10 2008-10-28 10:53:00      POR      home      1       shot   POR
## # ... with 34,614 more rows, and 6 more variables: player &amp;lt;chr&amp;gt;,
## #   result &amp;lt;chr&amp;gt;, points &amp;lt;int&amp;gt;, type &amp;lt;chr&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 코드를 설명하면&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; 두변수를 붙인 문자열에 대해 &lt;code&gt;ymd_hm()&lt;/code&gt; 함수로 넘긴 후&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time_index&lt;/code&gt; 라는 변수에 담고,&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; 두 변수를 제외한 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 알맞게 변형된 &lt;code&gt;lakers&lt;/code&gt; 를 이용해 좀 더 의미가 있을만한 탐색을 해보겠다.&lt;/p&gt;
&lt;h3 id=&quot;group-by-연산&quot;&gt;Group by 연산&lt;/h3&gt;
&lt;p&gt;첫번째는 Group by 연산이다.&lt;br /&gt;
월별 평균을 &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; 변수에 대해서 계산해보겠다.&lt;br /&gt;
이때 우리가 알고있는 &lt;code&gt;month()&lt;/code&gt; 함수를 이용하면 아주 간편하게 할 수 있겠다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;group_by&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;month&lt;/span&gt;(time_index)) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;summarize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;mean_x =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(x, &lt;span class=&quot;dt&quot;&gt;na.rm =&lt;/span&gt; T), &lt;span class=&quot;dt&quot;&gt;mean_y =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(y, &lt;span class=&quot;dt&quot;&gt;na.rm =&lt;/span&gt; T))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 &amp;lt;U+00D7&amp;gt; 3
##   `month(time_index)`   mean_x   mean_y
##                 &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1                   1 25.49382 13.89279
## 2                   2 25.01759 13.17499
## 3                   3 25.51587 13.20571
## 4                   4 25.38344 13.46396
## 5                  10 24.92188 13.12500
## 6                  11 25.47463 13.36926
## 7                  12 25.05895 13.48262&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;연별 평균을 계산하고 싶다면 &lt;code&gt;year()&lt;/code&gt; 이용하면 된다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;group_by&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;year&lt;/span&gt;(time_index)) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;summarize&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;mean_x =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(x, &lt;span class=&quot;dt&quot;&gt;na.rm =&lt;/span&gt; T), &lt;span class=&quot;dt&quot;&gt;mean_y =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(y, &lt;span class=&quot;dt&quot;&gt;na.rm =&lt;/span&gt; T))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 &amp;lt;U+00D7&amp;gt; 3
##   `year(time_index)`   mean_x   mean_y
##                &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1               2008 25.23402 13.40776
## 2               2009 25.36407 13.44319&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;filter&quot;&gt;Filter&lt;/h3&gt;
&lt;p&gt;두번째는 &lt;code&gt;filter()&lt;/code&gt; 를 이용해 분석에 사용할 기간을 서브세팅 해보는 예제를 만들어 보고 싶었다.&lt;br /&gt;
아래 코드는 &amp;quot;2008-10-28 12:00:00&amp;quot; 이전의 기간을 서브세팅 하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;filter&lt;/span&gt;(time_index &amp;lt;=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2008-10-28 12:00:00&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 416 &amp;lt;U+00D7&amp;gt; 12
##             time_index opponent game_type period      etype  team
##                 &amp;lt;dttm&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1  2008-10-28 12:00:00      POR      home      1  jump ball   OFF
## 2  2008-10-28 11:39:00      POR      home      1       shot   LAL
## 3  2008-10-28 11:37:00      POR      home      1    rebound   LAL
## 4  2008-10-28 11:25:00      POR      home      1       shot   LAL
## 5  2008-10-28 11:23:00      POR      home      1    rebound   LAL
## 6  2008-10-28 11:22:00      POR      home      1       shot   LAL
## 7  2008-10-28 11:22:00      POR      home      1       foul   POR
## 8  2008-10-28 11:22:00      POR      home      1 free throw   LAL
## 9  2008-10-28 11:00:00      POR      home      1       foul   LAL
## 10 2008-10-28 10:53:00      POR      home      1       shot   POR
## # ... with 406 more rows, and 6 more variables: player &amp;lt;chr&amp;gt;,
## #   result &amp;lt;chr&amp;gt;, points &amp;lt;int&amp;gt;, type &amp;lt;chr&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 보면 기존에 레코드는 34624 개 였지만, 서브세팅 된 후 레코드는 416 개로 줄어든 것을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;만약 &amp;quot;2008-10-28 12:00:00&amp;quot; ~ &amp;quot;2009-03-09 00:33:00&amp;quot; 의 기간에 대해서 서브세팅을 하고싶다면 어떻게 하여야 할까?&lt;br /&gt;
물론 &lt;code&gt;filter()&lt;/code&gt; 안에 조건을 하나 더 넣으면 된다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;filter&lt;/span&gt;(time_index &amp;gt;=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2008-10-28 12:00:00&amp;quot;&lt;/span&gt;), time_index &amp;lt;=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2009-03-09 00:33:00&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 25,554 &amp;lt;U+00D7&amp;gt; 12
##             time_index opponent game_type period     etype  team
##                 &amp;lt;dttm&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1  2008-10-28 12:00:00      POR      home      1 jump ball   OFF
## 2  2008-10-29 12:00:00      LAC      away      1 jump ball   OFF
## 3  2008-10-29 11:36:00      LAC      away      1      shot   LAL
## 4  2008-10-29 11:24:00      LAC      away      1      shot   LAC
## 5  2008-10-29 11:24:00      LAC      away      1   rebound   LAL
## 6  2008-10-29 11:08:00      LAC      away      1      shot   LAL
## 7  2008-10-29 10:58:00      LAC      away      1      shot   LAC
## 8  2008-10-29 10:57:00      LAC      away      1   rebound   LAL
## 9  2008-10-29 10:41:00      LAC      away      1      shot   LAL
## 10 2008-10-29 10:40:00      LAC      away      1   rebound   LAC
## # ... with 25,544 more rows, and 6 more variables: player &amp;lt;chr&amp;gt;,
## #   result &amp;lt;chr&amp;gt;, points &amp;lt;int&amp;gt;, type &amp;lt;chr&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그런데 lubridate package 에는 기간(Time intervals) 에 대해 조금 더 세련된 방법으로 처리할 수 있는 함수들을 제공해 주고 있다.&lt;br /&gt;
&lt;code&gt;interval()&lt;/code&gt; 함수와 &lt;code&gt;%within%&lt;/code&gt; 연산자를 이용하면 조금 더 직관적인 기간에 대해 서브세팅 할 수 있다.&lt;br /&gt;
아래처럼 말이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;inter &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;interval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2008-10-28 12:00:00&amp;quot;&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2009-03-09 00:33:00&amp;quot;&lt;/span&gt;))
lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;filter&lt;/span&gt;(time_index %within%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;inter)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 25,554 &amp;lt;U+00D7&amp;gt; 12
##             time_index opponent game_type period     etype  team
##                 &amp;lt;dttm&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1  2008-10-28 12:00:00      POR      home      1 jump ball   OFF
## 2  2008-10-29 12:00:00      LAC      away      1 jump ball   OFF
## 3  2008-10-29 11:36:00      LAC      away      1      shot   LAL
## 4  2008-10-29 11:24:00      LAC      away      1      shot   LAC
## 5  2008-10-29 11:24:00      LAC      away      1   rebound   LAL
## 6  2008-10-29 11:08:00      LAC      away      1      shot   LAL
## 7  2008-10-29 10:58:00      LAC      away      1      shot   LAC
## 8  2008-10-29 10:57:00      LAC      away      1   rebound   LAL
## 9  2008-10-29 10:41:00      LAC      away      1      shot   LAL
## 10 2008-10-29 10:40:00      LAC      away      1   rebound   LAC
## # ... with 25,544 more rows, and 6 more variables: player &amp;lt;chr&amp;gt;,
## #   result &amp;lt;chr&amp;gt;, points &amp;lt;int&amp;gt;, type &amp;lt;chr&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2개의 조건을 자질구레하게 정의하는것 보단&lt;br /&gt;
&lt;code&gt;interval()&lt;/code&gt; 를 사용한 후자의 방법이 훨씬 직관적일 수 있겠다.&lt;/p&gt;
&lt;p&gt;참고로 덧붙이면 &lt;code&gt;interval()&lt;/code&gt; 함수대신 &lt;code&gt;%--%&lt;/code&gt; 연산자를 써도 된다.&lt;br /&gt;
&lt;code&gt;%--%&lt;/code&gt; 를 &amp;quot;~&amp;quot; 처럼 생각하게 된다면 편할 것 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;inter &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2008-10-28 12:00:00&amp;quot;&lt;/span&gt;) %--%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ymd_hms&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;2009-03-09 00:33:00&amp;quot;&lt;/span&gt;)
lakers %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;filter&lt;/span&gt;(time_index %within%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;inter)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 25,554 &amp;lt;U+00D7&amp;gt; 12
##             time_index opponent game_type period     etype  team
##                 &amp;lt;dttm&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1  2008-10-28 12:00:00      POR      home      1 jump ball   OFF
## 2  2008-10-29 12:00:00      LAC      away      1 jump ball   OFF
## 3  2008-10-29 11:36:00      LAC      away      1      shot   LAL
## 4  2008-10-29 11:24:00      LAC      away      1      shot   LAC
## 5  2008-10-29 11:24:00      LAC      away      1   rebound   LAL
## 6  2008-10-29 11:08:00      LAC      away      1      shot   LAL
## 7  2008-10-29 10:58:00      LAC      away      1      shot   LAC
## 8  2008-10-29 10:57:00      LAC      away      1   rebound   LAL
## 9  2008-10-29 10:41:00      LAC      away      1      shot   LAL
## 10 2008-10-29 10:40:00      LAC      away      1   rebound   LAC
## # ... with 25,544 more rows, and 6 more variables: player &amp;lt;chr&amp;gt;,
## #   result &amp;lt;chr&amp;gt;, points &amp;lt;int&amp;gt;, type &amp;lt;chr&amp;gt;, x &amp;lt;int&amp;gt;, y &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;기타-간편-기능-함수들&quot;&gt;기타 간편 기능 함수들&lt;/h2&gt;
&lt;h3 id=&quot;timezone-인자를-받을-수-있는-now&quot;&gt;Timezone 인자를 받을 수 있는 &lt;code&gt;now()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;now&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2016-09-18 21:35:41 KST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;now()&lt;/code&gt; 함수는 &lt;code&gt;Sys.time()&lt;/code&gt; 와 거의 기능이 똑같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;now&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;America/New_York&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2016-09-18 08:35:41 EDT&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;?&lt;span class=&quot;kw&quot;&gt;now&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;UTC&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단 위의 예제처럼&lt;br /&gt;
Timezone 변경에 대해서 &lt;code&gt;Sys.time()&lt;/code&gt; 과는 다르게 &lt;code&gt;now()&lt;/code&gt; 는 이를 반영한 날짜 + 시각을 반환할 수 있다는 차이가 있다.&lt;/p&gt;
&lt;h3 id=&quot;오전-오후-am-pm&quot;&gt;오전? 오후? : &lt;code&gt;am()&lt;/code&gt;, &lt;code&gt;pm()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;현 시간이 오후인지 오전인지 확인하기 위해서&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ld1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2011-06-04 13:30:50 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;hour&lt;/span&gt;(ld1) &amp;gt;=&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;와 같은 코드를 사용하기 보단&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;am&lt;/span&gt;(ld1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;pm&lt;/span&gt;(ld1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;요런식으로 활용해 볼 수 있겠다.&lt;/p&gt;
&lt;h3 id=&quot;시각에-대한-올림-내림-반올림&quot;&gt;시각에 대한 올림, 내림, 반올림&lt;/h3&gt;
&lt;p&gt;제목대로 시각에 대한 올림, 내림, 반올림은 생각만해도 끔찍하다.&lt;br /&gt;
&lt;code&gt;round_date()&lt;/code&gt;, &lt;code&gt;floor_date()&lt;/code&gt;, &lt;code&gt;ceiling_date()&lt;/code&gt; 함수를 활용하는게 정서상 좋을 것이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;ld1
## [1] &amp;quot;2011-06-04 13:30:50 UTC&amp;quot;

&lt;span class=&quot;kw&quot;&gt;round_date&lt;/span&gt;(ld1, &lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04 14:00:00 UTC&amp;quot;
&lt;span class=&quot;kw&quot;&gt;round_date&lt;/span&gt;(ld1, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-05 UTC&amp;quot;

&lt;span class=&quot;kw&quot;&gt;floor_date&lt;/span&gt;(ld1, &lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04 13:00:00 UTC&amp;quot;
&lt;span class=&quot;kw&quot;&gt;floor_date&lt;/span&gt;(ld1, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04 UTC&amp;quot;

&lt;span class=&quot;kw&quot;&gt;ceiling_date&lt;/span&gt;(ld1, &lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-04 14:00:00 UTC&amp;quot;
&lt;span class=&quot;kw&quot;&gt;ceiling_date&lt;/span&gt;(ld1, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;)
## [1] &amp;quot;2011-06-05 UTC&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rpubs.com/davoodastaraky/lubridate&quot;&gt;Woking with Dates and Times with lubridate in R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html&quot;&gt;Do more with dates and times in R with lubridate 1.3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Sep 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/09/18/lubridate_package.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/09/18/lubridate_package.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>회귀분석시 모델적합성에 관련된 예제로 자주 언급되는 anscombe dataset</title>
        <description>&lt;p&gt;회귀분석을 공부하게 되면&lt;br /&gt;
책이나 인터넷의 포스팅된 글에서 모델적합성의 중요성을 부각시키는 아래의 데이터 시각화 예제를 많이 보았을 것이다.&lt;/p&gt;
&lt;br&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/anscombe1.png&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;요즘에는 데이터시각화의 중요성을 부각시키는 예제로도 자주 활용되는데&lt;br /&gt;
그만큼 눈으로 직접 보는것이 힘이다.&lt;/p&gt;
&lt;p&gt;나는 종종 이 예제를 활용하고 싶을때가 많았는데&lt;br /&gt;
이 데이터셋을 구하기 전 처음에는 데이터셋의 이름을 모르고 있어서&lt;br /&gt;
직접 눈대중으로 만들려는 멍청한 짓을 한적이 있었다.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;하지만 위에 사용된 데이터셋 이름이 &lt;a href=&quot;https://en.wikipedia.org/wiki/Anscombe%27s_quartet&quot;&gt;Anscombe&#39;s quartet&lt;/a&gt; 임을 알고는 구글링을 통해 손쉽게 얻을 수 있었다.&lt;/p&gt;
&lt;p&gt;그런데 또 뒤늦게&lt;br /&gt;
오늘 알아 챈 것이 있는데 R에서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Anscombe%27s_quartet&quot;&gt;Anscombe&#39;s quartet&lt;/a&gt; 데이터셋이 빌트인 되어 있었다는 것이다.&lt;br /&gt;
데이터셋을 호출하기 위해선 &lt;code&gt;anscombe&lt;/code&gt; 만 치면 됬었다...&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;anscombe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##    x1 x2 x3 x4    y1   y2    y3    y4
## 1  10 10 10  8  8.04 9.14  7.46  6.58
## 2   8  8  8  8  6.95 8.14  6.77  5.76
## 3  13 13 13  8  7.58 8.74 12.74  7.71
## 4   9  9  9  8  8.81 8.77  7.11  8.84
## 5  11 11 11  8  8.33 9.26  7.81  8.47
## 6  14 14 14  8  9.96 8.10  8.84  7.04
## 7   6  6  6  8  7.24 6.13  6.08  5.25
## 8   4  4  4 19  4.26 3.10  5.39 12.50
## 9  12 12 12  8 10.84 9.13  8.15  5.56
## 10  7  7  7  8  4.82 7.26  6.42  7.91
## 11  5  5  5  8  5.68 4.74  5.73  6.89&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;으악.. 허무하다..&lt;br /&gt;
&lt;code&gt;?anscombe&lt;/code&gt; 를 하고 나서 예제코드가 잘 준비된 것을 보니 지금까지 과정들이 헛수고임을 깨닫게 되었다...&lt;br /&gt;
그 충격에 이렇게 블로그 글로 포스팅을 하게 되었다. 😅&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;이 멍청한 짓 마저 의외로 엄청 어려워 실패 😓&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/09/16/Anscombe_dataset.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/09/16/Anscombe_dataset.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>Timeline JS 소개 (with 나의 일본 여행계획)</title>
        <description>&lt;p&gt;10월에 친구들과 일본으로 여행을 갈 계획이다.&lt;br /&gt;
2개월이란 시간이 남아있는데 나에겐 첫 해외여행이어서 여러 가지를 신경 쓰고 준비해 보려고 한다.&lt;/p&gt;
&lt;p&gt;여행초보인 내가 지금 고민하는 것은 여행일정표를 여행 동료들과 어떻게 공유하는 게 좋을까 고민하고 있다.&lt;br /&gt;
여행계획이라는 것이 상당히 즉흥적일 수도 있고, 시시각각 변할 수 있는 변덕쟁이이기 때문에 쉽게 수정할 수 있어야 하고, 수정된 것이 바로 적용되어 공유될 수 있어야 편리하다고 생각했다.&lt;br /&gt;
이고민이 최근에 &lt;a href=&quot;https://timeline.knightlab.com/&quot;&gt;Timeline JS&lt;/a&gt; 라는 오픈소스를 발견하는 계기가 되었다.&lt;/p&gt;
&lt;br&gt;
&lt;center&gt;
&lt;img src=&quot;/assets/TimelineJS1.png&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;본 포스팅 글은 &lt;a href=&quot;https://timeline.knightlab.com/&quot;&gt;Timeline JS&lt;/a&gt; 의 간단한 소개와 사용방법을 내 여행계획과 함께 정리해 보고자 한다.&lt;br /&gt;
(※ 참고로 여행을 갈 당일이 되기까지 이글은 계속해서 변경될 것 같다!)&lt;/p&gt;
&lt;h2 id=&quot;a-timeline-js&quot;&gt;A) &lt;a href=&quot;https://timeline.knightlab.com/&quot;&gt;Timeline JS&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;백문이 불여일견..&lt;br /&gt;
구구절절 소개하는 것보단 Timeline JS 로 만들 수 있는 것은 아래와 같은 어플리케이션이다.&lt;/p&gt;
&lt;iframe src=&quot;https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1mgvNplYZJEfYU8q5_-ML9w4GjJcUH-CuMKSmUU4nI4k&amp;amp;font=Default&amp;amp;lang=en&amp;amp;initial_zoom=2&amp;amp;height=650&quot; width=&quot;100%&quot; height=&quot;650&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;
&lt;p&gt;이처럼 인터렉티브한 시간흐름표(Timeline)를 만들 수 있는 오픈소스 도구이다.&lt;br /&gt;
초보자를 위해 Timeline 에 대한 정보를 Google spreadsheet 에 잘 정리해 놓고 연동시키기만 하면 누구든지 만들 수 있다.&lt;br /&gt;
(전문가들을 위한 JSON 스킬을 이용하면 더 핵심적이고 다방면적인 기능들을 활용할 수 있다고 추가로 홈페이지에 소개되어 있다.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://timeline.knightlab.com/&quot;&gt;Timeline JS&lt;/a&gt; 는 이처럼 &lt;strong&gt;연대기적 성격을 가진 정보를 쉽게 시각적으로 표현할 수 있는 훌륭한 도구&lt;/strong&gt;이다.&lt;br /&gt;
그리고 여러 장점이 있겠지만 무엇보다도 웹기반 어플리케이션이기 때문에 쉬운 공유가 가능하고, 다양한 타 어플리케이션과의 연동이 가능하다는 잠재력을 가지고 있다.&lt;/p&gt;
&lt;p&gt;위의 여행계획 정보가 담겨있는 Google spreadsheet 역시 웹을 통해 언제든지 수정, 편집이 가능하므로 Timeline 어플리케이션을 나뿐만 아니라 여행 동료들이 마음껏 수정할 수 있다.&lt;/p&gt;
&lt;p&gt;위의 Timeline 을 만들기 위해서 사용한 Google spreadsheet 는 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;img src=&quot;/assets/TimelineJS2.png&quot; /&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1mgvNplYZJEfYU8q5_-ML9w4GjJcUH-CuMKSmUU4nI4k/edit#gid=0&quot; class=&quot;uri&quot;&gt;https://docs.google.com/spreadsheets/d/1mgvNplYZJEfYU8q5_-ML9w4GjJcUH-CuMKSmUU4nI4k/edit#gid=0&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Timeline JS 홈페이지에서 기본적으로 &lt;a href=&quot;https://drive.google.com/previewtemplate?id=1pHBvXN7nmGkiG8uQSUB82eNlnL8xHu6kydzH_-eguHQ&amp;amp;mode=public&quot;&gt;템플릿&lt;/a&gt;을 제공해 주는데 이를 가져온 후 항목별로 나와 여행 동료들이 값을 수정한 것 이다.&lt;/p&gt;
&lt;h2 id=&quot;b-튜토리얼&quot;&gt;B) 튜토리얼&lt;/h2&gt;
&lt;p&gt;직접 만들어 보고 싶은 욕구가 생기면?&lt;br /&gt;
행동으로 옮기기만 하면 된다.&lt;br /&gt;
&lt;a href=&quot;https://timeline.knightlab.com/&quot;&gt;Timeline JS&lt;/a&gt; 홈페이지에서 제공하는 튜토리얼 영상을 보면 내가 소개한 이야기들의 구체적인 방법들이 스크린캐스트로 담겨 있다.&lt;/p&gt;
&lt;br&gt;
&lt;center&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/143407878&quot; width=&quot;100%&quot; height=&quot;400&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/open_source_tool/2016/08/15/Itinerary_Japan.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/open_source_tool/2016/08/15/Itinerary_Japan.html</guid>
        
        
        <category>Open_source_tool</category>
        
      </item>
    
      <item>
        <title>Blog 의 이전 (Wordpress 에서 Jekyll 로)</title>
        <description>&lt;h2 id=&quot;blog-를-이전했다&quot;&gt;Blog 를 이전했다!&lt;/h2&gt;
&lt;p&gt;기존의 블로그는 &lt;a href=&quot;https://ko.wordpress.org/&quot;&gt;Wordpress&lt;/a&gt;를 기반으로 하였고 국내 외부호스팅 서비스를 이용하였었는데, 사실 그때의 블로그가 내생에 처음으로 만들어본 블로그이자 새로운 도전이었었다.&lt;br /&gt;
따라서 첫 블로그를 제작하는 과정이 신기하였고 들떠 있었으며, 워드프레스의 다양한 기능들과 플러그인 및 가능성들을 맛보며 두서없이 설계를 시작했었다.&lt;br /&gt;
그 과정이 상당히 재미있었는데 이 때문에 지인의 &amp;quot;Welcome to Jekyll!&amp;quot; 의 문장은 한귀로 흘려버렸고 오로지 워드프레스 하나만을 의존하여 블로그를 기어코 완성시켰었다.&lt;/p&gt;
&lt;p&gt;지금은 어리숙한 설계 덕택에 블로그 관리 약 1년 이후, 생산성의 저하를 느끼기 시작했다.&lt;br /&gt;
그리고 이를 해결하기 위해선 많은 기능을 끼워 넣은 덕분에 높은 복잡성을 이해해야 한다는 문제를 체감하기 시작한 것이다.&lt;/p&gt;
&lt;p&gt;그리고 무엇보다도 Git 을 이전 블로그를 만들 때 전혀 알지 못했었기 때문에 버전관리의 부재 역시 치명적이었었다.&lt;br /&gt;
하지만 지금은 Git 을 알고있고 이를 이용하여 오로지 글쓰기에 전념할 수 있는 환경을 갖출 수 있을 거란 자신감에 블로그 개편과 동시에 마침 Github 호스팅이 가능한 &lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;Jekyll&lt;/a&gt; 로 갈아탈 생각까지 갖게 되었다.&lt;/p&gt;
&lt;p&gt;그리고 이렇게 블로그를 이전하고&lt;br /&gt;
템플릿에 있던 포스트 글 &amp;quot;Welcome to Jekyll!&amp;quot; 을 편집해 이 글을 작성하게 되었다.&lt;/p&gt;
&lt;h2 id=&quot;통계-r-프로그래밍-카페와의-독립&quot;&gt;&lt;a href=&quot;http://cafe.naver.com/lovetokens&quot;&gt;통계 R 프로그래밍 카페&lt;/a&gt;와의 독립&lt;/h2&gt;
&lt;p&gt;이전 블로그는 내가 운영하는 &lt;a href=&quot;http://cafe.naver.com/lovetokens&quot;&gt;통계 R 프로그래밍 카페&lt;/a&gt;의 연결고리로서 역할이 사실 강했다.&lt;br /&gt;
그리고 그 당시 R 언어에 대해 심오하게 공부하여야겠다는 의지 또한 담겨있어서 였을까? 블로그 마저도 제목에 R 이 포함되어 블로그의 성격을 국한시켰었다.&lt;br /&gt;
하지만 지금은 상황이 다르다.&lt;br /&gt;
데이터 분석을 하기 위해 R 언어 이외에도 알아야 하는 컴퓨터 기술, 언어, 서비스, 지식, 플랫폼들은 무궁무진하게 많아지고 있고, 급진적으로 발전하며 새로운 기술이 생길 것이라는것을..&lt;br /&gt;
내가 Jekyll 이란 새로운 기술을 이용하여 블로그를 제작하듯이 말이다.&lt;br /&gt;
내가 공부하고 연구해야할 것을 R 로만 국한시켰던 이전 블로그는 지금의 취지와 많이 달라졌다.&lt;br /&gt;
때문에 블로그 이전과 동시에 &amp;quot;통계 R 프로그래밍&amp;quot; 커뮤니티 카페와 독립을 꾀하고자 한다.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/diary/2016/07/23/Welcome_to_Jekyll.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/diary/2016/07/23/Welcome_to_Jekyll.html</guid>
        
        
        <category>Diary</category>
        
      </item>
    
      <item>
        <title>R에서 특정 웹페이지의 이미지 파일 Crawling 하기</title>
        <description>&lt;h2 id=&quot;a-목표&quot;&gt;A) 목표&lt;/h2&gt;
&lt;p&gt;크롤링과 같은 실전은 경험이 전무하였는데, 최근 친구의 질문 덕분에 제대로 된 크롤링 경험을 쌓을 수 있었다.&lt;br /&gt;
대단한 경험은 아니지만 나에게 있어 신선했던 경험을 공유하기 위해 정리해 본다.&lt;/p&gt;
&lt;p&gt;본 포스팅 글은 특정 웹페이지의 이미지 파일들을 내 컴퓨터 하드로 저장시키기 위한 R 코드를 작성하는것을 목표로 한다.&lt;br /&gt;
이 목표를 이룰 수 있는 완벽한 방법을 소개하는 것은 아니지만, &lt;strong&gt;최소한 http 프로토콜을 통해 접근가능한 이미지는 자동으로 다운로드할 수 있는 방법&lt;/strong&gt;이 될 것이다.&lt;br /&gt;
웹페이지의 그림파일들을 저장시키고 싶은데 그러기엔 워낙 많은 이미지 파일들이 있어 손수 저장시키기엔 부담이 있을 경우 어느정도는 대안이 될 수 있겠다.&lt;/p&gt;
&lt;p&gt;예제로 선택한 웹 사이트는 Google 의 이미지 검색에서 &amp;quot;men&amp;quot; 이런 검색어로 검색시 나타나는 웹페이지로 &lt;a href=&quot;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&quot;&gt;아래 링크&lt;/a&gt;와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&quot; class=&quot;uri&quot;&gt;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;a-1-준비&quot;&gt;A-1) 준비&lt;/h3&gt;
&lt;p&gt;우선 이미지 파일만을 크롤링 하는 방법에 대해서 구상할 필요가 있다.&lt;br /&gt;
크롤링 컨셉은 이렇게 잡았보았다.&lt;/p&gt;
&lt;p&gt;첫번째 : 웹페이지의 HTML 코드를 파싱하여 R 에서 가공할 수 있는 형태로 변환한다.&lt;br /&gt;
두번째 : 변환된 HTML 코드에서 &amp;lt;img&amp;gt; tag 의 src 인자값을 정규표현식을 이용해 추출한다.&lt;br /&gt;
세번째 : 준비된 src 인자값 링크들을 R 객체로 만들고 download 명령을 반복문을 이용해 내려준다.&lt;/p&gt;
&lt;p&gt;이렇게 되면 자동적으로 이미지 파일들을 선별하여 내 컴퓨터로 가져올 수 있게 될 것이다.&lt;/p&gt;
&lt;p&gt;패키지는 아래의 3개 패키지를 이용하여 코딩을 하였다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(RCurl)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(XML)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr) &lt;span class=&quot;co&quot;&gt;# Optional package (for pipe operator)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;b-시작&quot;&gt;B) 시작&lt;/h2&gt;
&lt;h3 id=&quot;b-1-img-tag-의-src-인자값-크롤링&quot;&gt;B-1) img tag 의 src 인자값 크롤링&lt;/h3&gt;
&lt;p&gt;R 내에서 웹 사이트의 html code 를 character 형식으로 가공하기 위해선 아래의 절차가 필요했다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;htmlcode &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;getURL&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;htmlParse %&amp;gt;%
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;capture.output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getURL()&lt;/code&gt; 함수는 RCurl package 의 함수이다.&lt;br /&gt;
함수에 url 을 입력하는 형태로 사용하며, 웹피이지의 html 코드를 그대로 가져오는 역할을 한다.&lt;br /&gt;
단 단락이 나뉘어 있지 않은, 이쁘지 않은 형태 그대로 가져오기 때문에 추후에 정규표현식을 이용한 패턴추출시 어려운 점이 생긴다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htmlParse()&lt;/code&gt; 함수는 XML package 의 함수인데 html 의 구문을 어느정도 이해한 후 단락을 나눠주는 역할을 한다.&lt;br /&gt;
단 이 함수를 통해 반환되는 결과물은 class 가 특이한 형태로 반환된다.&lt;br /&gt;
우리는 대단한 것을 하지 않을 것이므로 일반적인 character 형태로 다시 되돌리기 위해 &lt;code&gt;capture.output()&lt;/code&gt; 함수를 한번 더 거친 결과물을 &lt;code&gt;htmlcode&lt;/code&gt; 객체로 할당했다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htmlcode&lt;/code&gt; 의 head 부분만 살펴보면 html 의 시작을 알리는 &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot; 이 첫번째 단락에 있는것을 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;head&lt;/span&gt;(htmlcode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;                                                                                   
## [2] &amp;quot;&amp;lt;html itemscope=\&amp;quot;\&amp;quot; itemtype=\&amp;quot;http://schema.org/SearchResultsPage\&amp;quot; lang=\&amp;quot;ko\&amp;quot;&amp;gt;&amp;quot;                
## [3] &amp;quot;&amp;lt;head&amp;gt;&amp;quot;                                                                                            
## [4] &amp;quot;&amp;lt;meta content=\&amp;quot;text/html; charset=UTF-8\&amp;quot; http-equiv=\&amp;quot;Content-Type\&amp;quot;&amp;gt;&amp;quot;                           
## [5] &amp;quot;&amp;lt;meta content=\&amp;quot;/images/branding/googleg/1x/googleg_standard_color_128dp.png\&amp;quot; itemprop=\&amp;quot;image\&amp;quot;&amp;gt;&amp;quot;
## [6] &amp;quot;&amp;lt;link href=\&amp;quot;/images/branding/product/ico/googleg_lodp.ico\&amp;quot; rel=\&amp;quot;shortcut icon\&amp;quot;&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R에서 접근 가능한 html code 가 준비 되었으므로 이젠 정규표현식을 통해 우리가 필요로하는 이미지 주소링크를 추출한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step1) 우선 img 테그 전체를 소비&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;img_tag_pattern &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;&amp;lt;img.*?&amp;gt;&amp;quot;&lt;/span&gt;
img_tag &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;htmlcode %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;regmatches&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;regexpr&lt;/span&gt;(img_tag_pattern, .))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Step2) 소비된 img tag 중에서 src argument 값을 소비&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;src_href_pattern &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;(?&amp;lt;=src=&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\\&amp;quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;).*?(?=&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\\&amp;quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&amp;quot;&lt;/span&gt;
src_href &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;img_tag %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;regmatches&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;regexpr&lt;/span&gt;(src_href_pattern, ., &lt;span class=&quot;dt&quot;&gt;perl=&lt;/span&gt;T))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각각의 정규표현식을 설명하면 첫번째 단계의 &lt;code&gt;&amp;lt;img.*?&amp;gt;&lt;/code&gt; 은 img tag 전체를 선택하는 패턴이며,&lt;br /&gt;
두번째 단계의 &lt;code&gt;(?&amp;lt;=src=\\\&amp;quot;).*?(?=\\\&amp;quot;)&lt;/code&gt; 는 src 인자값을 선택하되 양옆의 &amp;quot;&amp;quot; 큰따옴표는 소비하지 않는 패턴이다. (R의 grep 함수에서 정규표현식의 이스케이프가 제대로 동작하지 않는다면 &lt;code&gt;perl=TRUE&lt;/code&gt; 를 통해 해결이 가능하기도 하다.)&lt;/p&gt;
&lt;p&gt;단계를 크개 2개로 나누어 정규표현식을 짠 이유는 img tag 중에서 src 인자값을 추출하여야 이미지링크 문자열만 뽑을 수 있기 때문이다.&lt;/p&gt;
&lt;p&gt;이렇게 준비된 결과 &lt;code&gt;src_href&lt;/code&gt; 를 살펴보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;src_href&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;/textinputassistant/tia.png&amp;quot;                                                                                       
##  [2] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTaailzt78W3ZQh40T90r1Rka4_l_c5GJofA-cljDIemIJBGxoHOUlz-vA&amp;quot;   
##  [3] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQVaheNF9b4uR3SPGSyoWMl0g-yosunwqNQ9f4Mx2dEYnvjsaBND7-SSEEb&amp;quot;  
##  [4] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcT2JkzFeiNIE1yWYzlaRa64eqUEvlBPIKvto5a7DkDOYzZE6Eoq8HnNszTF&amp;quot;  
##  [5] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRGUd7FTthseKrn5SDOAF6c_4fk35-FfC7M3D8z37pWlGLcgna3JOwDC39hkw&amp;quot;
##  [6] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcTguxDqYAOCbfYYxrO3y_pMI-pVyuqQ4PKnyIgGG3A_k4XYXCgB5Ktl-Ncq&amp;quot;  
##  [7] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSqDHBvQ4hOssWtMnPZkv2YYG1DDJ2c7d-vYIpwq8rLju55EUExxUpBv-6I&amp;quot;  
##  [8] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcRS8Q8WGPZhpTSTTV6AS5WhUNZqzMMGhq-LsgmHkgWOeVXDSsrRLt7ldYo&amp;quot;   
##  [9] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSK0ydbRXqqpR-1VJmI-P1F2BRbdTD4s33sSPky6lqnwnGsBIEbr_OlVia_&amp;quot;  
## [10] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcRozDkozg5BJIFTLSo1jkeNt_sM_bIW5q51excQJ46dQgAamfA5sVErKvg2&amp;quot;  
## [11] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScFxYNMLxdvnuAwXU0uVcBNZnGNtWjQDW-EhU5isVp7edlxYM0cluR5AI&amp;quot;   
## [12] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSWGwGpQFC7qTNpvjtJ-d56E3NgKoVDxPZcDGKpMHqitRKk6NOwPG1ZU9Q&amp;quot;   
## [13] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS0WJGngmvgtyZL7aOsQiMIw24_51lktpSxlaVCRyIqYnAW-timSUCYYl8&amp;quot;   
## [14] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcSG4dEKuBVm59c9boqlKtBbcNFwJhwYngw76ipqK2pgBb5V_KTxcr_SrdBiVw&amp;quot;
## [15] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQX-3l2ybOEZnmSsoTEtHXeEtWSba2fuqi0rhhewUxPk0ctOTxh5ReJT4pz&amp;quot;  
## [16] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ4Aa-lZ0I-vBtUIMFUb_Vxh0LaqU4QqJw2TmnsPzF49XTZFMkOAri25SI&amp;quot;   
## [17] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTL9IlaaakTewmIvevJH0mR144GE-3V9QfKM8IBRzhVgiOA6yqQHDXpOec&amp;quot;   
## [18] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSS5FOUYkzv2yJqS04ALZUf-1uVOU7CkIKFOdYLnWBoVSlyc7ciLtJqo60&amp;quot;   
## [19] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQ1jbAvG16sf5gRa2ygBlDuX3PilS9dvQYSDsshlWwu5GHyQ0of9eW90e53nA&amp;quot;
## [20] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfgFxGMB1iHCLCSV2_NdMi6UQ1CuBwHdmSaFRITCEjDcX2NiSO59-jtj2n&amp;quot;  
## [21] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ702D4y236w_gsb3hAyl5JZvKnW7YlGYnh-Zi2T-QgxzhIb738U4P3tA&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 결과를 볼 때 추가적인 전처리가 더 필요할 수 있을거라 예상된다.&lt;br /&gt;
예를들어 &amp;quot;http:&amp;quot; 로 시작하는것만 소비해야 정상적인 이미지 파일 다운로드가 가능할 것이다.&lt;br /&gt;
첫번째 링크 /textinputassistant/tia.png 는 루트에서 직접적으로 가져오는 링크 이므로 우리가 접근할 수 있는 이미지가 아니다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;src_href &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;src_href[-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;b-2-download-image-file&quot;&gt;B-2) download image file&lt;/h3&gt;
&lt;p&gt;이후의 예제는 20개의 준비된 이미지 파일링크를 반복문을 돌려 자신의 하드로 가져오는 코드이다.&lt;br /&gt;
우선 한개의 파일을 다운로드 하는방법부터 살펴보면&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;download.file&lt;/span&gt;(src_href[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&amp;quot;./output/test_image1&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTaailzt78W3ZQh40T90r1Rka4_l_c5GJofA-cljDIemIJBGxoHOUlz-vA 링크의 이미지파일을 워킹디릭토리의 output 폴더에 &amp;quot;test_image1&amp;quot; 라는 파일로 저장시키는 코드이다. &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이를 이용해서 반복문을 통해 20개 모든 이미지를 다운로드하는 코드를 짜면&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(i in src_href %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;length %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;seq){
    &lt;span class=&quot;kw&quot;&gt;download.file&lt;/span&gt;(src_href[i], &lt;span class=&quot;kw&quot;&gt;paste0&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;./output/image_&amp;quot;&lt;/span&gt;, i))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output 폴더에 &amp;quot;image_1&amp;quot;, ... , &amp;quot;image_20&amp;quot; 개의 이미지가 잘 저장되어 있는지 확인해보면 되겠다!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets//Crawling_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;단 여기서 각 외부의 이미지파일 형식이 무엇인지 알 수 없으므로, 로컬로 저장시에 포맷을 지정하지 못하는 문제가 있다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/07/23/Crawling_image.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/07/23/Crawling_image.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>석사논문 감사의 글</title>
        <description>&lt;p&gt;완성된 석사 논문 책자를 받고 나서 상당히 아쉬움이 남는다.&lt;br /&gt;
바로 감사의 글을 논문에 포함하지 않고 빠른 행정처리를 위해 논문을 제출했다는 것 이다.&lt;br /&gt;
제출한 논문을 다시 가져와서 감사의 글을 강제로 집어 넣을 수도 없는 노릇이다.&lt;br /&gt;
그래서 아쉽지만, 감사의 글을 이곳에 남기고자 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;감사의 글&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어떠한 계기 때문에 석사과정을 밟기로 각오하고 이 길을 선택했는지 지금 와서 생각해보면 구체화 시키기가 쉽지 않다. 솔직히 말해서 잘 모르겠다. 전반적으로 볼 때 난 자연스럽게 여기까지 오게 되었다.&lt;br /&gt;
모든 것이 이러한 식으로 물 흐르듯 화살 같은 속도의 시간이란 버스에 탑승하여 또 어딘가 모르는 곳에 하차하고, 탑승하는 것을 되풀이하다가 또 한번 도심 속에 하차했다.&lt;br /&gt;
하지만 분명 대학교를 입학하고 대학원 진학을 희망하던 그때 당시의 선택에 기로에는 여러 가지 사건들과 주변사람들의 대화 및 조언들이 복합되어 나의 책임하 선택한 나의 길이었다.&lt;br /&gt;
그리고 면밀하게 기억을 돌이켜 보면 볼수록 수많은 작은 파도들이 있었고 부딪힘이 있었다. 이러한 파도들이 지금의 나를 만든 것이라 생각한다.&lt;br /&gt;
감사의 글을 적게 된 이유도 길고 거대했던 여정 사이에 숨겨졌던 파도들을 상기시키기 위함이다.&lt;/p&gt;
&lt;p&gt;나는 어느 시점 부터인가 오픈소스에 대한 학문적 열정이 커졌다.&lt;br /&gt;
이런 열정을 느낄 수 있게 해준, 미흡했던 시절 나에게 오픈소스 중 R이란 언어를 (직)간접적으로 처음 소개했던 이석호 지도교수님께 감사드리고 싶다.&lt;br /&gt;
지금 생각해 보면 교수님은 항상 나도 모르게 제자에게 슬며시 간접적으로 영향력을 행사하는데 특별한 능력을 가지신듯 하다.&lt;/p&gt;
&lt;p&gt;지금도 그렇지만 믿을 수 없을 만큼 많은 사람들이 내가 운영 중인 블로그에 방문하고 지속적으로 지지해 주고 있다는 것을 느낀다.&lt;br /&gt;
이러한 관심이 나의 학문적 열정이란 불씨를 꺼트리지 않게 해준 양초와 같았다.&lt;br /&gt;
계속해서 아이디어를 공유하고 조화시킬 수 있는 익명의 많은 분들이 있어 나의 사고방식은 이전보다 확실히 성숙해졌다.&lt;/p&gt;
&lt;p&gt;익명의 분들 중 개인적으로 알게 된 운명적인 분들 역시 감사의 마음을 드리고 싶다.&lt;br /&gt;
서로 직면해서 이야기를 나눈 것은 2번밖에 없지만, 장문의 이메일을 주고받으며 오픈소스뿐만 아니라 컴퓨터에 전반적인 지식과 광범위한 데이터 과학의 세계로 나를 인도해준 고석범 대표님이 지금 많이 생각난다. 정말 감사드리고 싶다.&lt;br /&gt;
R에 대해 아직 모든것을 배운것이 아닌 당시 나의 어떤 모습이 도대체 마음에 들어서 책을 같이 편찬하자 제의하신지 모르겠으나, 내생에 처음이자 마지막이 될 법한 도서편찬의 기회를 주신 박찬성 실장님께 감사의 마음을 전하고 싶다.&lt;br /&gt;
나에게 또 다른 기회와 새로운 비즈니스 경험을 선사해 주신, 앞으로 계속적으로 감사의 마음이 들 것 같은 박진호 전무님께도 감사의 마음을 표시하고 싶다.&lt;/p&gt;
&lt;p&gt;사실 내 안의 아집은 남들이 일으키는 파도에 대한 방파제이었다.&lt;br /&gt;
이 방파제를 뚫고 나에게 메시지를 주기 위하여 지속적으로 파도를 일으켜 준 한국외국어대 통계학과 교수님들과, 직접적으로 도움과 후원을 해준 랩실, 그리고 대학원 동기 및 선후배 분들에 대한 그 고마움을 그당시 느끼지 못했다.&lt;br /&gt;
나는 상대적으로 보면 확실히 정적인 사람이고 요즘 말로 리액션이 약한 사람이다.&lt;br /&gt;
따라서 리액션 대신 진심어린 지금의 글을 통해 조금이나마 나의 고마움에 대한 표시를 남기고 전달하고자 한다.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/diary/2016/07/01/Thanks_GS.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/diary/2016/07/01/Thanks_GS.html</guid>
        
        
        <category>Diary</category>
        
      </item>
    
      <item>
        <title>R에서 data.frame 과 data.table 에 대해 join 작업을 이용한 벤치마킹</title>
        <description>&lt;p&gt;R에서 최근에 많이 하는 작업이 있다.&lt;br /&gt;
바로 data.frame 기반으로 데이터를 인아웃풋 한 코드들을 모두 data.table 로 코드 스위칭하는 작업이다.&lt;br /&gt;
data.table 의 빠른처리속도는 이전부터 명성이 자자했지만 게으름으로 인해 고집스럽게 쓰지 않았었다.&lt;br /&gt;
하지만 인내심의 한계에 다다르고 빠른 속도를 직접 체감하고 나서 뒤늦게 도입하기 시작한 것 같다.&lt;/p&gt;
&lt;p&gt;구글링을 통해서도 다양한 data.table 의 showcase 들이 있고, 퍼포먼스를 확인할 수 있는 예제코드를 구하기 쉽다.&lt;br /&gt;
나도 그러한 예제코드를 만들어 보았고 공유해 보고자 한다.&lt;br /&gt;
나는 data.frame 과 data.table 에 대해서 병합작업을 이용해 벤치마킹 하는 코드 프로그램을 아래와 같이 작성해 보았다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(data.table)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(rbenchmark)

N=&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;

df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N),
    &lt;span class=&quot;dt&quot;&gt;group =&lt;/span&gt; LETTERS %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(N, T),
    &lt;span class=&quot;dt&quot;&gt;Var1 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
    &lt;span class=&quot;dt&quot;&gt;Var2 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df
df2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;rev,
    &lt;span class=&quot;dt&quot;&gt;Var3 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, -&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample_n&lt;/span&gt;(N*.&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df

dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt, ID)
dt2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df2); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt2, ID)

&lt;span class=&quot;kw&quot;&gt;benchmark&lt;/span&gt;(
    join_res_df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(df, df2),
    join_res_dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(dt, dt2), &lt;span class=&quot;dt&quot;&gt;replications=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 간략히 설명해 보면&lt;/p&gt;
&lt;h2 id=&quot;a-예제로-사용할-data.frame-data.table-객체-만들기&quot;&gt;A) 예제로 사용할 data.frame, data.table 객체 만들기&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(data.table)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(rbenchmark)

N=&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;

df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N),
    &lt;span class=&quot;dt&quot;&gt;group =&lt;/span&gt; LETTERS %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(N, T),
    &lt;span class=&quot;dt&quot;&gt;Var1 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
    &lt;span class=&quot;dt&quot;&gt;Var2 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df
df2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;rev,
    &lt;span class=&quot;dt&quot;&gt;Var3 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, -&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample_n&lt;/span&gt;(N*.&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df

dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt, ID)
dt2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df2); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt2, ID)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1,000,000 개의 데이터셋과 이중에서 90% 인 900,000 개의 새로운 변수를 가진 데이터셋을 서로 join 하기 위해 (의미가 별로 없는) 데이터프레임 &lt;code&gt;df&lt;/code&gt;, &lt;code&gt;df2&lt;/code&gt; 객체를 만드는 코드이다.&lt;br /&gt;
join 으로 붙여져야 하는 대상은 &amp;quot;Var3&amp;quot; 으로 명칭된 변수 &lt;span class=&quot;math inline&quot;&gt;−10&lt;/span&gt; 을 평균으로 하는 정규분포 난수이다.&lt;/p&gt;
&lt;p&gt;이후 class 만 data.table 로 바꾼 &lt;code&gt;dt&lt;/code&gt;, &lt;code&gt;dt2&lt;/code&gt; 동일내용의 객체를 준비했다.&lt;br /&gt;
data.table 에선 key variable 를 사전에 지정할 수 있는데 바로 data.table 의 &lt;code&gt;setkey()&lt;/code&gt; 함수를 통해 가능하다.&lt;br /&gt;
key 변수는 공통의 &amp;quot;ID&amp;quot; 변수를 선택하였다.&lt;br /&gt;
&lt;code&gt;setkey()&lt;/code&gt; 함수를 이용한 이와같은 key 변수 지정은 추후 join 작업의 편의성을 증대시켜주고 처리속도의 작은 개선을 기대할 수 있게 해준다.&lt;br /&gt;
무엇보다 현업시 key variable 에 대한 상기를 지속적으로 해야하는 상황에서 이렇게 명시해 줄 수 있는 도구가 있는것은 긍정적이라고 할 수 있다.&lt;br /&gt;
key variable 세팅이 제대로 되었는지가 궁금하다면 &lt;code&gt;tables()&lt;/code&gt; 함수를 통해 눈으로 확인 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##      NAME      NROW NCOL MB COLS               KEY
## [1,] dt   1,000,000    4 20 ID,group,Var1,Var2 ID 
## [2,] dt2    900,000    2 11 ID,Var3            ID 
## Total: 31MB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;출력결과의 맨 우측 Key 항목에 &amp;quot;ID&amp;quot; 가 있는것을 보아 제대로 세팅이 된 것을 볼 수 있다.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;b-join&quot;&gt;B) Join&lt;/h2&gt;
&lt;p&gt;본격적으로 병합(Join)을 시작한다.&lt;br /&gt;
join 방법은 무난한 left join 을 실시하기 위해 dplyr package 에 있는 &lt;code&gt;left_join()&lt;/code&gt; 함수를 이용 했다.&lt;/p&gt;
&lt;p&gt;data.frame 에 대한 join 과&lt;br /&gt;
data.table 에 대한 join 수행시간을 간편하게 측정하기위해 rbenchmark package 의 &lt;code&gt;benchmark()&lt;/code&gt; 함수를 이용했다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;benchmark&lt;/span&gt;(
    join_res_df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(df, df2, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;),
    join_res_dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(dt, dt2, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;replications=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##                                           test replications elapsed
## 1 join_res_df &amp;lt;- left_join(df, df2, by = &amp;quot;ID&amp;quot;)           20  19.608
## 2 join_res_dt &amp;lt;- left_join(dt, dt2, by = &amp;quot;ID&amp;quot;)           20   7.667
##   relative user.self sys.self user.child sys.child
## 1    2.557    18.395    1.114          0         0
## 2    1.000     6.782    0.848          0         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 코드는 &lt;code&gt;join_res_df &amp;lt;- left_join(df, df2, by=&amp;quot;ID&amp;quot;)&lt;/code&gt; 와 &lt;code&gt;join_res_dt &amp;lt;- left_join(dt, dt2, by=&amp;quot;ID&amp;quot;)&lt;/code&gt; 코드를 의도적으로 20번 반복 수행해 걸린 시간을 측정해주게 된다.&lt;br /&gt;
현 예제에 대한 시간측정결과 elapsed 항목을 볼 때 data.table 에 대한 join 작업의 수행속도가 data.frame 보다 약 10배 빠른 것을 볼 수 있다!&lt;/p&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;&lt;code&gt;setkey()&lt;/code&gt; 함수를 통해 key variable 를 세팅하지 않았던 단계에 &lt;code&gt;tables()&lt;/code&gt; 를 실행시키면 Key 항목은 빈칸이었을 것 이다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/06/27/Benchmarking_DF_vs_DT.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/06/27/Benchmarking_DF_vs_DT.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 S3 최소재현예제</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;Hands-On Programming with R (Garrett Grolemund)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;책에서 설명된 S3 에 의하면&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;제너릭 함수 (generic function)&lt;/li&gt;
&lt;li&gt;메서드 (method)&lt;/li&gt;
&lt;li&gt;클래스 (class)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3개의 기반 디스패치를 가리켜 S3라고 한다.&lt;/p&gt;
&lt;p&gt;하지만 저런용어가 쉽게 와닿지 않는 상태에서 이해하기란 쉽지 않았다.&lt;br /&gt;
때문에 R의 S3 가 무엇인지 빠르게 체감할 수 있는 나만의 아주 간단한 self 코드를 만들어 보았다.&lt;br /&gt;
최소재현예제 이므로 코드실행에 5분만 투자한다면 큰 체감을 얻을 수 있을것으로 예상된다.&lt;br /&gt;
어떠한 부가설명도 없는 코드를 아래와 같이 공유하고자 한다.&lt;/p&gt;
&lt;h2 id=&quot;s3-최소재현예제&quot;&gt;S3 최소재현예제&lt;/h2&gt;
&lt;h3 id=&quot;generic-function&quot;&gt;generic function&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  &lt;span class=&quot;kw&quot;&gt;UseMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;lovetoken&amp;quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;method&quot;&gt;method&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken.default &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  x
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken.class1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(x), &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(x))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken.class2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt;(x), &lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(x))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;class&quot;&gt;class&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;test &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.default(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  0  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(test) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;class1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.class1(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 55  5&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(test) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;class2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.class2(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11.000000  3.316625&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(test) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;unknown&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.default(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  0  1  2  3  4  5  6  7  8  9 10
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;unknown&amp;quot;&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 12 Jun 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/06/12/S3.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/06/12/S3.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 구분구적법 적분과정 시뮬레이션 및 integrate() 함수 알아보기</title>
        <description>&lt;p&gt;내가 고등학교 이과생으로써 지낸 2학년 기억을 돌이켜 보면 적분의 방법은 이렇게 배웠던 것 같다.&lt;br /&gt;
넓이계산이 용이한 사각형을 함수와 x축 사이에 강제로 끼워 맞춤으로써 넓이를 근사시키는 과정을 취하였고,&lt;br /&gt;
특히 x축 기준 사각형을 등간격으로 잘게잘게 쪼개는 과정을 무한대로 취함으로써 적분값을 완벽히 근사시키는 법으로 적분값을 구한다 라고 말이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fun &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x) x^&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;*x^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;*x +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;
fun_forarea &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
    res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fun&lt;/span&gt;(x)
    res[ x&amp;lt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; |&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;x&amp;gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; ] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;(res)
}

P &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ggplot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)), &lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x=&lt;/span&gt;x)) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;stat_function&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;fun=&lt;/span&gt;fun) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;stat_function&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;fun=&lt;/span&gt;fun_forarea, &lt;span class=&quot;dt&quot;&gt;geom=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;area&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;#3E5CFF&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;alpha=&lt;/span&gt;.&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_hline&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;yintercept =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_bw&lt;/span&gt;()

P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/integrate-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;video   controls loop&gt;
&lt;source src=&quot;/assets/integrate_ani-.webm&quot; /&gt;
&lt;p&gt;
video of chunk integrate_ani
&lt;/p&gt;
&lt;/video&gt;
&lt;p&gt;이러한 형태로 넓이를 구하기 힘든 곡선모형의 넓이를 구하기 위해&lt;br /&gt;
충분히 작은 n개의 기본도형으로 나누어 끼워맞춘 후 넓이를 구한것을 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 이라 할 때&lt;br /&gt;
기본도형을 더 작은단위로 하여 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; 을 극한으로 보냄으로써 넓이를 근사시키는 것을 &lt;strong&gt;구분구적법&lt;/strong&gt;이라 한다.&lt;br /&gt;
즉 구분구적법은 &lt;span class=&quot;math inline&quot;&gt;lim&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; → ∞&lt;/sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 을 계산하는 과정이다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 미분이든 적분이든 사람이 손으로 풀듯이 드라마틱하게 계산할 수 있는 능력이 없을것이다.&lt;br /&gt;
구분구적법에 기반한 프로그래밍적인 계산을 통해 적분값을 계산하게 될 것인데&lt;br /&gt;
R에서는 &lt;code&gt;intergrate()&lt;/code&gt; 함수를 이용하여 적분값을 계산할 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;integrate&lt;/span&gt;(fun, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## 87.08333 with absolute error &amp;lt; 9.7e-13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;구분구적법은 기본도형을 최대한 잘게 쪼개는 과정이 필요한데&lt;br /&gt;
이를 무한히 반복하는것을 컴퓨터에게 시킨다면&lt;br /&gt;
stop 조건이 없을 경우 멈추지 않을것이다.&lt;br /&gt;
그렇다고 n을 무한으로 보내지 못하고 중간에 stop 하게 되면 적분값의 오차는 반드시 생길수 밖에 없을것이다.&lt;br /&gt;
추정컨데 &lt;code&gt;integrate()&lt;/code&gt; 함수를 실행시키고 출력되는 &amp;quot;absolute error&amp;quot; 문구가 출력된 이유가 이것때문일 것이라 생각된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;integrate()&lt;/code&gt; 함수 사용방법은 간편하다.&lt;br /&gt;
계산을 하고싶은 함수를 첫번째 인자에 넘겨주고,&lt;br /&gt;
폐구간에 대한 정보를 &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;upper&lt;/code&gt; 인자에 넘겨주기만 하면 적분값을 계산해 준다.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/06/06/integate_function.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/06/06/integate_function.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 중심극한의 정리를 animation ploting 을 통해 시뮬레이션 하기</title>
        <description>&lt;p&gt;통계 비전공자에게 중심극한의 정리를 설명해야 했던 적이 있었는데,&lt;br /&gt;
심오한 이론들을 증명하며 설명하느니 한번 보여주는 것이 더 큰 공감을 얻게될 것 같아 animation plot 을 준비한적이 있다.&lt;br /&gt;
본 포스팅 글은 R markdown 포맷에서 코드청크옵션 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 을 통해 animation plot 을 준비하는 것이 가능하다는 것을 소개하고 그 예시로 중심극한정리 시뮬레이션을 통해 설명할 것이다.&lt;/p&gt;
&lt;h2 id=&quot;a-중심극한정리-central-limit-theorem-에-대해서&quot;&gt;A) 중심극한정리 (Central Limit Theorem) 에 대해서&lt;/h2&gt;
&lt;p&gt;중심극한정리는 표본의 크기가 커짐에 따라 표본평균의 분포가 점점 정규분포로 근사(닮아) 짐을 의미하는 이론이다.&lt;br /&gt;
그리고 표본은 어떠한 분포 타입에 나온 것이더라 하더라도 상관없이 중심극한정리에 해당되는것을 특징으로 한다.&lt;br /&gt;
여기서 헷갈리는 것이 있을 수 있는데, 표본평균은 단하나의 값으로 분포가 될 수 있느냐 라는 질문이 생길 수 있다.&lt;br /&gt;
이 궁금증은 표본 자체가 확률변수라는 것으로써 이해할 수 있다.&lt;br /&gt;
표본 자체가 확률변수이므로 이를 종합하여 평균한 값 하나일지라도 분명 확률변수이며 이는 분포로써 설명이 가능하다.&lt;br /&gt;
하지만 시뮬레이션에서 사용할 표본평균은 단 한 개 가지고는 분포를 시각적으로 볼 수 없다.&lt;br /&gt;
따라서 표본평균들을 여러 개 발생시킬 것이다.&lt;/p&gt;
&lt;p&gt;정리하면 시뮬레이션 시 특정 분포에 대해 많은 표본을 뽑은 후 표본평균계산 후 이를 반복해서 다양한 표본평균들을 준비해 히스토그램으로 분포를 확인할 것이다.&lt;br /&gt;
또한 표본의 크기가 커짐에 따라 정규분포로 닮아진다는 것을 보여주는 것과 동시에 점근적으로 보여주는 것이 시뮬레이션의 큰 의미라고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;우선 현 시뮬레이션에선&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정분포를 포아송분포 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;X&lt;/em&gt; ∼ &lt;em&gt;P&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;i&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;n&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt; = 10)&lt;/span&gt; 으로&lt;/li&gt;
&lt;li&gt;표본개수는 n=500 으로 통일하고&lt;/li&gt;
&lt;li&gt;표본평균들을 1,000개 준비하기 위해 위 과정을 1000번 반복&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;할 것이다.&lt;/p&gt;
&lt;h2 id=&quot;b-단편-시뮬레이션&quot;&gt;B) 단편 시뮬레이션&lt;/h2&gt;
&lt;p&gt;위에서 설명한 시뮬레이션은 아래코드를 통해 확인 가능하다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
    n &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;
    sample &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;lambda=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sample)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 통해 1000개의 표본평균들이 &lt;code&gt;res&lt;/code&gt; 객체에 담겨있게된다.&lt;br /&gt;
정규분포로 근사되었는지 분포를 확인하는건 2가지 방법을 통해 해보고자 한다.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;히스토그램과 밀도추정선을 덧그린 plot&lt;/li&gt;
&lt;li&gt;Quantile-Quantile Plots&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;hist&lt;/span&gt;(res, &lt;span class=&quot;dt&quot;&gt;freq=&lt;/span&gt;F); &lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;density&lt;/span&gt;(res), &lt;span class=&quot;dt&quot;&gt;lty=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/CLT1-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;1번에 해당되는 히스토그램이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;qqnorm&lt;/span&gt;(res)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/CLT2-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;2번에 해당하는 소위 QQplot 이다.&lt;/p&gt;
&lt;p&gt;분명 결과물을 통해선 포아송분포에서 뽑은 표본들의 평균의 분포가 정규분포에 근사하는 것을 체감할 수는 있다.&lt;br /&gt;
하지만 나는 이것보다 분포의 개수가 많으면 많아질수록 정규분포의 닮아짐이 높아진다는 점근적근사를 시각적으로 보여주고 싶은 것이었다.&lt;/p&gt;
&lt;h2 id=&quot;c-rmarkdown-의-코드청크옵션-fig.showanimate-에-대해서&quot;&gt;C) Rmarkdown 의 코드청크옵션 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 에 대해서&lt;/h2&gt;
&lt;p&gt;필자는 Rmarkdown 포맷을 자주 사용하여 내 지식을 전달하는 편인데 데이터분석과 융화된 글을 쓰기에 거리낌 없는 도구로 굉장한 공감을 얻었기 때문이다.&lt;br /&gt;
특히 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 와 같은 코드청크 옵션은 데이터의 변질에 따른 plot output 의 변화를 보여주기에 간편한 기능을 제공해서 적극적으로 애용 중이다.&lt;/p&gt;
&lt;p&gt;위의 예시를 이어서 설명하자면 단편적인 시뮬레이션을 통해 정규분포에 근사하는 것을 체감시켰지만,&lt;br /&gt;
이보다 더 중요한 것을 설명하기 위해 표본개수 즉 표본평균을 계산한 반복회수가 증가함으로써 일어나는 정규근사 정도를 animation ploting 통해 보여줄 것이다.&lt;/p&gt;
&lt;p&gt;아래처럼 말이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(numbers) &lt;span class=&quot;co&quot;&gt;# for fibonacci function&lt;/span&gt;
ani_N &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(); for(i in &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;) ani_N[i&lt;span class=&quot;dv&quot;&gt;-4&lt;/span&gt;] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fibonacci&lt;/span&gt;(i)
ani_N&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1]      5      8     13     21     34     55     89    144    233    377
## [11]    610    987   1597   2584   4181   6765  10946  17711  28657  46368
## [21]  75025 121393 196418 317811 514229 832040&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(N in ani_N){
    res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
        n &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;
        sample &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;lambda=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sample)
    })
    &lt;span class=&quot;kw&quot;&gt;hist&lt;/span&gt;(res, &lt;span class=&quot;dt&quot;&gt;freq=&lt;/span&gt;F, &lt;span class=&quot;dt&quot;&gt;ylim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;xlim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)); &lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;density&lt;/span&gt;(res), &lt;span class=&quot;dt&quot;&gt;lty=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;video   controls loop&gt;
&lt;source src=&quot;/assets/CLT1_ani-.webm&quot; /&gt;
&lt;p&gt;
video of chunk CLT1_ani
&lt;/p&gt;
&lt;/video&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(N in ani_N){
    res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
        n &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;
        sample &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;lambda=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sample)
    })
    &lt;span class=&quot;kw&quot;&gt;qqnorm&lt;/span&gt;(res, &lt;span class=&quot;dt&quot;&gt;xlim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;ylim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;video   controls loop&gt;
&lt;source src=&quot;/assets/CLT2_ani-.webm&quot; /&gt;
&lt;p&gt;
video of chunk CLT2_ani
&lt;/p&gt;
&lt;/video&gt;
&lt;p&gt;위의 B장에서 수행했던 코드의 본체는 부수적인 차이만 존재할 뿐 거의 흡사하다.&lt;br /&gt;
차이점은 시뮬레이션 본체코드를 for 문을 통해 &lt;code&gt;ani_N&lt;/code&gt; 의 피보나치수열로 반복회수를 조정한것이며,&lt;br /&gt;
시각화 코드인 &lt;code&gt;hist()&lt;/code&gt;, &lt;code&gt;qqnorm()&lt;/code&gt; 함수에 &lt;code&gt;xlim&lt;/code&gt;, &lt;code&gt;ylim&lt;/code&gt; 인자값들을 부여해 범위를 고정시켰다는 차이가 있다.&lt;br /&gt;
그리고 본장에서 설명하고자 차이점은 사실 R코드가 아닌 Rmarkdown 코드청크옵션에 내막이 있다.&lt;br /&gt;
verbatim 모드로 Rmarkdown 코드청크 전체를 보여주면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# ```{r fig.show=&amp;quot;animate&amp;quot;, interval=.4}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# for(N in ani_N){&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   res &amp;lt;- replicate(N, expr={&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       n &amp;lt;- 500&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       sample &amp;lt;- rpois(n, lambda=10)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       mean(sample)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   })&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   hist(res, freq=F, ylim=c(0, 7), xlim=c(9, 11)); lines(density(res), lty=2, col=&amp;quot;blue&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# ```&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 코드청크에 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;, interval=.4&lt;/code&gt; 와 같은 옵션이 존재하지 않는다면&lt;br /&gt;
&lt;code&gt;ani_N&lt;/code&gt; 의 마지막 값에 대한 중심극한 시뮬레이션 histogram 결과만 나올것이다.&lt;br /&gt;
실제 수행된 코드는 &lt;code&gt;ani_N&lt;/code&gt; 에 담겨있는 수열들의 값대로 히스토그램을 그리겠지만 결국 출력되는건 마지막 값에 해당되는 단편 시뮬레이션 plot output 이다.&lt;/p&gt;
&lt;p&gt;하지만 코드청크에 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 를 부여하면 중간중간에 출력되는 plot output 을 임시로 모두 저장하게된다.&lt;br /&gt;
이후 코드청크의 &lt;code&gt;interval&lt;/code&gt; 옵션값만큼의 간격으로 저장된 plot output 프레임들을 순차적으로 인코딩하여 영상을 만든다!&lt;br /&gt;
지금은 interval 값을 0.4초로 지정했는데 프레임 넘김을 더 빠르게 하고싶은 경우 이값을 작게 조정하여 희망하는 속도로 맞출 수 있다.&lt;br /&gt;
그리하여 피보나치수열 대로 표본이 증가하면 증가할수록 정규분포로 근사되는것을 시각적으로 볼 수 있게 되는 것이다.&lt;/p&gt;
&lt;p&gt;QQplot animation 도 마찬가지 형태이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# ```{r fig.show=&amp;quot;animate&amp;quot;, interval=.4}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# for(N in ani_N){&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   res &amp;lt;- replicate(N, expr={&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       n &amp;lt;- 500&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       sample &amp;lt;- rpois(n, lambda=10)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       mean(sample)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   })&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   qqnorm(res, xlim=c(-4, 4), ylim=c(9, 11))&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# ```&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;d-요구사항&quot;&gt;D) 요구사항&lt;/h2&gt;
&lt;p&gt;단 이렇게 영상으로 인코딩하는 작업을 하기 위해서 운영체계별로 요구하는 플러그인이 다를 수 있다.&lt;br /&gt;
필자는 OSX 에서 이 글을 작성한 것이며 &lt;a href=&quot;https://www.ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt; 설치가 요구되었었다.&lt;/p&gt;
&lt;p&gt;그리고 이것이 요구사항일지는 모르겠지만 코드수행시간이란 비용 이외에 animation plot 영상을 인코딩하는 시간 역시 필요하다.&lt;br /&gt;
위의 예제처럼 간단한 수준의 짧은 영상을 만드는 것은 인코딩시간이 조금 걸리지만,&lt;br /&gt;
그렇지 않으면 많은 인내심이 요구될 수 있다.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/05/26/CLT.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/05/26/CLT.html</guid>
        
        
        <category>R</category>
        
      </item>
    
  </channel>
</rss>
