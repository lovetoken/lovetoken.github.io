<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>https://lovetoken.github.io/</link>
    <atom:link href="https://lovetoken.github.io/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 31 Jul 2016 12:55:29 +0900</pubDate>
    <lastBuildDate>Sun, 31 Jul 2016 12:55:29 +0900</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Blog 의 이전 (Wordpress 에서 Jekyll 로)</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;blog-를-이전했다&quot;&gt;Blog 를 이전했다!&lt;/h2&gt;
&lt;p&gt;기존의 블로그는 &lt;a href=&quot;https://ko.wordpress.org/&quot;&gt;Wordpress&lt;/a&gt;를 기반으로 하였고 국내 외부호스팅 서비스를 이용하였었는데, 사실 그때의 블로그가 내생에 처음으로 만들어본 블로그이자 새로운 도전이었었다.&lt;br /&gt;
따라서 첫 블로그를 제작하는 과정이 신기하였고 들떠 있었으며, 워드프레스의 다양한 기능들과 플러그인 및 가능성들을 맛보며 두서없이 설계를 시작했었다.&lt;br /&gt;
그 과정이 상당히 재미있었는데 이 때문에 지인의 &amp;quot;Welcome to Jekyll!&amp;quot; 의 문장은 한귀로 흘려버렸고 오로지 워드프레스 하나만을 의존하여 블로그를 기어코 완성시켰었다.&lt;/p&gt;
&lt;p&gt;지금은 어리숙한 설계 덕택에 블로그 관리 약 1년 이후, 생산성의 저하를 느끼기 시작했다.&lt;br /&gt;
그리고 이를 해결하기 위해선 많은 기능을 끼워 넣은 덕분에 높은 복잡성을 이해해야 한다는 문제를 체감하기 시작한 것이다.&lt;/p&gt;
&lt;p&gt;그리고 무엇보다도 Git 을 이전 블로그를 만들 때 전혀 알지 못했었기 때문에 버전관리의 부재 역시 치명적이었었다.&lt;br /&gt;
하지만 지금은 Git 을 알고있고 이를 이용하여 오로지 글쓰기에 전념할 수 있는 환경을 갖출 수 있을 거란 자신감에 블로그 개편과 동시에 마침 Github 호스팅이 가능한 &lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;Jekyll&lt;/a&gt; 로 갈아탈 생각까지 갖게 되었다.&lt;/p&gt;
&lt;p&gt;그리고 이렇게 블로그를 이전하고&lt;br /&gt;
템플릿에 있던 포스트 글 &amp;quot;Welcome to Jekyll!&amp;quot; 을 편집해 이 글을 작성하게 되었다.&lt;/p&gt;
&lt;h2 id=&quot;통계-r-프로그래밍-카페와의-독립&quot;&gt;&lt;a href=&quot;http://cafe.naver.com/lovetokens&quot;&gt;통계 R 프로그래밍 카페&lt;/a&gt;와의 독립&lt;/h2&gt;
&lt;p&gt;이전 블로그는 내가 운영하는 &lt;a href=&quot;http://cafe.naver.com/lovetokens&quot;&gt;통계 R 프로그래밍 카페&lt;/a&gt;의 연결고리로서 역할이 사실 강했다.&lt;br /&gt;
그리고 그 당시 R 언어에 대해 심오하게 공부하여야겠다는 의지 또한 담겨있어서 였을까? 블로그 마저도 제목에 R 이 포함되어 블로그의 성격을 국한시켰었다.&lt;br /&gt;
하지만 지금은 상황이 다르다.&lt;br /&gt;
데이터 분석을 하기 위해 R 언어 이외에도 알아야 하는 컴퓨터 기술, 언어, 서비스, 지식, 플랫폼들은 무궁무진하게 많아지고 있고, 급진적으로 발전하며 새로운 기술이 생길 것이라는것을..&lt;br /&gt;
내가 Jekyll 이란 새로운 기술을 이용하여 블로그를 제작하듯이 말이다.&lt;br /&gt;
내가 공부하고 연구해야할 것을 R 로만 국한시켰던 이전 블로그는 지금의 취지와 많이 달라졌다.&lt;br /&gt;
때문에 블로그 이전과 동시에 &amp;quot;통계 R 프로그래밍&amp;quot; 커뮤니티 카페와 독립을 꾀하고자 한다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/diary/2016/07/23/Welcome_to_Jekyll.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/diary/2016/07/23/Welcome_to_Jekyll.html</guid>
        
        
        <category>Diary</category>
        
      </item>
    
      <item>
        <title>R에서 특정 웹페이지의 이미지 파일 Crawling 하기</title>
        <description>&lt;hr /&gt;
&lt;h1 id=&quot;a-목표&quot;&gt;A) 목표&lt;/h1&gt;
&lt;p&gt;크롤링과 같은 실전은 경험이 전무하였는데, 최근 친구의 질문 덕분에 제대로 된 크롤링 경험을 쌓을 수 있었다.&lt;br /&gt;
대단한 경험은 아니지만 나에게 있어 신선했던 경험을 공유하기 위해 정리해 본다.&lt;/p&gt;
&lt;p&gt;본 포스팅 글은 특정 웹페이지의 이미지 파일들을 내 컴퓨터 하드로 저장시키기 위한 R 코드를 작성하는것을 목표로 한다.&lt;br /&gt;
이 목표를 이룰 수 있는 완벽한 방법을 소개하는 것은 아니지만, &lt;strong&gt;최소한 http 프로토콜을 통해 접근가능한 이미지는 자동으로 다운로드할 수 있는 방법&lt;/strong&gt;이 될 것이다.&lt;br /&gt;
웹페이지의 그림파일들을 저장시키고 싶은데 그러기엔 워낙 많은 이미지 파일들이 있어 손수 저장시키기엔 부담이 있을 경우 어느정도는 대안이 될 수 있겠다.&lt;/p&gt;
&lt;p&gt;예제로 선택한 웹 사이트는 Google 의 이미지 검색에서 &amp;quot;men&amp;quot; 이런 검색어로 검색시 나타나는 웹페이지로 &lt;a href=&quot;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&quot;&gt;아래 링크&lt;/a&gt;와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&quot; class=&quot;uri&quot;&gt;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;a-1-준비&quot;&gt;A-1) 준비&lt;/h2&gt;
&lt;p&gt;우선 이미지 파일만을 크롤링 하는 방법에 대해서 구상할 필요가 있다.&lt;br /&gt;
크롤링 컨셉은 이렇게 잡았보았다.&lt;/p&gt;
&lt;p&gt;첫번째 : 웹페이지의 HTML 코드를 파싱하여 R 에서 가공할 수 있는 형태로 변환한다.&lt;br /&gt;
두번째 : 변환된 HTML 코드에서 &amp;lt;img&amp;gt; tag 의 src 인자값을 정규표현식을 이용해 추출한다.&lt;br /&gt;
세번째 : 준비된 src 인자값 링크들을 R 객체로 만들고 download 명령을 반복문을 이용해 내려준다.&lt;/p&gt;
&lt;p&gt;이렇게 되면 자동적으로 이미지 파일들을 선별하여 내 컴퓨터로 가져올 수 있게 될 것이다.&lt;/p&gt;
&lt;p&gt;패키지는 아래의 3개 패키지를 이용하여 코딩을 하였다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(RCurl)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(XML)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr) &lt;span class=&quot;co&quot;&gt;# Optional package (for pipe operator)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;b-시작&quot;&gt;B) 시작&lt;/h1&gt;
&lt;h2 id=&quot;b-1-img-tag-의-src-인자값-크롤링&quot;&gt;B-1) img tag 의 src 인자값 크롤링&lt;/h2&gt;
&lt;p&gt;R 내에서 웹 사이트의 html code 를 character 형식으로 가공하기 위해선 아래의 절차가 필요했다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;htmlcode &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;getURL&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;https://www.google.co.kr/search?biw=1436&amp;amp;bih=782&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;q=men&amp;amp;oq=men&amp;amp;gs_l=img.3...4008.4572.0.5170.0.0.0.0.0.0.0.0..0.0....0...1c.1.64.img..0.0.0.id2CbaNm_HQ&amp;quot;&lt;/span&gt;) %&amp;gt;%
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;htmlParse %&amp;gt;%
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;capture.output&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getURL()&lt;/code&gt; 함수는 RCurl package 의 함수이다.&lt;br /&gt;
함수에 url 을 입력하는 형태로 사용하며, 웹피이지의 html 코드를 그대로 가져오는 역할을 한다.&lt;br /&gt;
단 단락이 나뉘어 있지 않은, 이쁘지 않은 형태 그대로 가져오기 때문에 추후에 정규표현식을 이용한 패턴추출시 어려운 점이 생긴다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htmlParse()&lt;/code&gt; 함수는 XML package 의 함수인데 html 의 구문을 어느정도 이해한 후 단락을 나눠주는 역할을 한다.&lt;br /&gt;
단 이 함수를 통해 반환되는 결과물은 class 가 특이한 형태로 반환된다.&lt;br /&gt;
우리는 대단한 것을 하지 않을 것이므로 일반적인 character 형태로 다시 되돌리기 위해 &lt;code&gt;capture.output()&lt;/code&gt; 함수를 한번 더 거친 결과물을 &lt;code&gt;htmlcode&lt;/code&gt; 객체로 할당했다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htmlcode&lt;/code&gt; 의 head 부분만 살펴보면 html 의 시작을 알리는 &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot; 이 첫번째 단락에 있는것을 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;head&lt;/span&gt;(htmlcode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;                                                                                   
## [2] &amp;quot;&amp;lt;html itemscope=\&amp;quot;\&amp;quot; itemtype=\&amp;quot;http://schema.org/SearchResultsPage\&amp;quot; lang=\&amp;quot;ko\&amp;quot;&amp;gt;&amp;quot;                
## [3] &amp;quot;&amp;lt;head&amp;gt;&amp;quot;                                                                                            
## [4] &amp;quot;&amp;lt;meta content=\&amp;quot;text/html; charset=UTF-8\&amp;quot; http-equiv=\&amp;quot;Content-Type\&amp;quot;&amp;gt;&amp;quot;                           
## [5] &amp;quot;&amp;lt;meta content=\&amp;quot;/images/branding/googleg/1x/googleg_standard_color_128dp.png\&amp;quot; itemprop=\&amp;quot;image\&amp;quot;&amp;gt;&amp;quot;
## [6] &amp;quot;&amp;lt;link href=\&amp;quot;/images/branding/product/ico/googleg_lodp.ico\&amp;quot; rel=\&amp;quot;shortcut icon\&amp;quot;&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R에서 접근 가능한 html code 가 준비 되었으므로 이젠 정규표현식을 통해 우리가 필요로하는 이미지 주소링크를 추출한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step1) 우선 img 테그 전체를 소비&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;img_tag_pattern &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;&amp;lt;img.*?&amp;gt;&amp;quot;&lt;/span&gt;
img_tag &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;htmlcode %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;regmatches&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;regexpr&lt;/span&gt;(img_tag_pattern, .))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Step2) 소비된 img tag 중에서 src argument 값을 소비&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;src_href_pattern &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;(?&amp;lt;=src=&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\\&amp;quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;).*?(?=&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\\&amp;quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&amp;quot;&lt;/span&gt;
src_href &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;img_tag %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;regmatches&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;regexpr&lt;/span&gt;(src_href_pattern, ., &lt;span class=&quot;dt&quot;&gt;perl=&lt;/span&gt;T))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각각의 정규표현식을 설명하면 첫번째 단계의 &lt;code&gt;&amp;lt;img.*?&amp;gt;&lt;/code&gt; 은 img tag 전체를 선택하는 패턴이며,&lt;br /&gt;
두번째 단계의 &lt;code&gt;(?&amp;lt;=src=\\\&amp;quot;).*?(?=\\\&amp;quot;)&lt;/code&gt; 는 src 인자값을 선택하되 양옆의 &amp;quot;&amp;quot; 큰따옴표는 소비하지 않는 패턴이다. (R의 grep 함수에서 정규표현식의 이스케이프가 제대로 동작하지 않는다면 &lt;code&gt;perl=TRUE&lt;/code&gt; 를 통해 해결이 가능하기도 하다.)&lt;/p&gt;
&lt;p&gt;단계를 크개 2개로 나누어 정규표현식을 짠 이유는 img tag 중에서 src 인자값을 추출하여야 이미지링크 문자열만 뽑을 수 있기 때문이다.&lt;/p&gt;
&lt;p&gt;이렇게 준비된 결과 &lt;code&gt;src_href&lt;/code&gt; 를 살펴보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;src_href&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;/textinputassistant/tia.png&amp;quot;                                                                                       
##  [2] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTaailzt78W3ZQh40T90r1Rka4_l_c5GJofA-cljDIemIJBGxoHOUlz-vA&amp;quot;   
##  [3] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQVaheNF9b4uR3SPGSyoWMl0g-yosunwqNQ9f4Mx2dEYnvjsaBND7-SSEEb&amp;quot;  
##  [4] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcT2JkzFeiNIE1yWYzlaRa64eqUEvlBPIKvto5a7DkDOYzZE6Eoq8HnNszTF&amp;quot;  
##  [5] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRGUd7FTthseKrn5SDOAF6c_4fk35-FfC7M3D8z37pWlGLcgna3JOwDC39hkw&amp;quot;
##  [6] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcTguxDqYAOCbfYYxrO3y_pMI-pVyuqQ4PKnyIgGG3A_k4XYXCgB5Ktl-Ncq&amp;quot;  
##  [7] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSqDHBvQ4hOssWtMnPZkv2YYG1DDJ2c7d-vYIpwq8rLju55EUExxUpBv-6I&amp;quot;  
##  [8] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcRS8Q8WGPZhpTSTTV6AS5WhUNZqzMMGhq-LsgmHkgWOeVXDSsrRLt7ldYo&amp;quot;   
##  [9] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSK0ydbRXqqpR-1VJmI-P1F2BRbdTD4s33sSPky6lqnwnGsBIEbr_OlVia_&amp;quot;  
## [10] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcRozDkozg5BJIFTLSo1jkeNt_sM_bIW5q51excQJ46dQgAamfA5sVErKvg2&amp;quot;  
## [11] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScFxYNMLxdvnuAwXU0uVcBNZnGNtWjQDW-EhU5isVp7edlxYM0cluR5AI&amp;quot;   
## [12] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSWGwGpQFC7qTNpvjtJ-d56E3NgKoVDxPZcDGKpMHqitRKk6NOwPG1ZU9Q&amp;quot;   
## [13] &amp;quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS0WJGngmvgtyZL7aOsQiMIw24_51lktpSxlaVCRyIqYnAW-timSUCYYl8&amp;quot;   
## [14] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcSG4dEKuBVm59c9boqlKtBbcNFwJhwYngw76ipqK2pgBb5V_KTxcr_SrdBiVw&amp;quot;
## [15] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQX-3l2ybOEZnmSsoTEtHXeEtWSba2fuqi0rhhewUxPk0ctOTxh5ReJT4pz&amp;quot;  
## [16] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ4Aa-lZ0I-vBtUIMFUb_Vxh0LaqU4QqJw2TmnsPzF49XTZFMkOAri25SI&amp;quot;   
## [17] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTL9IlaaakTewmIvevJH0mR144GE-3V9QfKM8IBRzhVgiOA6yqQHDXpOec&amp;quot;   
## [18] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSS5FOUYkzv2yJqS04ALZUf-1uVOU7CkIKFOdYLnWBoVSlyc7ciLtJqo60&amp;quot;   
## [19] &amp;quot;https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQ1jbAvG16sf5gRa2ygBlDuX3PilS9dvQYSDsshlWwu5GHyQ0of9eW90e53nA&amp;quot;
## [20] &amp;quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfgFxGMB1iHCLCSV2_NdMi6UQ1CuBwHdmSaFRITCEjDcX2NiSO59-jtj2n&amp;quot;  
## [21] &amp;quot;https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQ702D4y236w_gsb3hAyl5JZvKnW7YlGYnh-Zi2T-QgxzhIb738U4P3tA&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 결과를 볼 때 추가적인 전처리가 더 필요할 수 있을거라 예상된다.&lt;br /&gt;
예를들어 &amp;quot;http:&amp;quot; 로 시작하는것만 소비해야 정상적인 이미지 파일 다운로드가 가능할 것이다.&lt;br /&gt;
첫번째 링크 /textinputassistant/tia.png 는 루트에서 직접적으로 가져오는 링크 이므로 우리가 접근할 수 있는 이미지가 아니다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;src_href &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;src_href[-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;b-2-download-image-file&quot;&gt;B-2) download image file&lt;/h2&gt;
&lt;p&gt;이후의 예제는 20개의 준비된 이미지 파일링크를 반복문을 돌려 자신의 하드로 가져오는 코드이다.&lt;br /&gt;
우선 한개의 파일을 다운로드 하는방법부터 살펴보면&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;download.file&lt;/span&gt;(src_href[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&amp;quot;./output/test_image1&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcTaailzt78W3ZQh40T90r1Rka4_l_c5GJofA-cljDIemIJBGxoHOUlz-vA 링크의 이미지파일을 워킹디릭토리의 output 폴더에 &amp;quot;test_image1&amp;quot; 라는 파일로 저장시키는 코드이다. &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이를 이용해서 반복문을 통해 20개 모든 이미지를 다운로드하는 코드를 짜면&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(i in src_href %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;length %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;seq){
    &lt;span class=&quot;kw&quot;&gt;download.file&lt;/span&gt;(src_href[i], &lt;span class=&quot;kw&quot;&gt;paste0&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;./output/image_&amp;quot;&lt;/span&gt;, i))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;output 폴더에 &amp;quot;image_1&amp;quot;, ... , &amp;quot;image_20&amp;quot; 개의 이미지가 잘 저장되어 있는지 확인해보면 되겠다!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets//Crawling_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;hr /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;단 여기서 각 외부의 이미지파일 형식이 무엇인지 알 수 없으므로, 로컬로 저장시에 포맷을 지정하지 못하는 문제가 있다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/07/23/Crawling_image.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/07/23/Crawling_image.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>석사논문 감사의 글</title>
        <description>&lt;hr /&gt;
&lt;p&gt;완성된 석사 논문 책자를 받고 나서 상당히 아쉬움이 남는다.&lt;br /&gt;
바로 감사의 글을 논문에 포함하지 않고 빠른 행정처리를 위해 논문을 제출했다는 것 이다.&lt;br /&gt;
제출한 논문을 다시 가져와서 감사의 글을 강제로 집어 넣을 수도 없는 노릇이다.&lt;br /&gt;
그래서 아쉽지만, 감사의 글을 이곳에 남기고자 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;감사의 글&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어떠한 계기 때문에 석사과정을 밟기로 각오하고 이 길을 선택했는지 지금 와서 생각해보면 구체화 시키기가 쉽지 않다. 솔직히 말해서 잘 모르겠다. 전반적으로 볼 때 난 자연스럽게 여기까지 오게 되었다.&lt;br /&gt;
모든 것이 이러한 식으로 물 흐르듯 화살 같은 속도의 시간이란 버스에 탑승하여 또 어딘가 모르는 곳에 하차하고, 탑승하는 것을 되풀이하다가 또 한번 도심 속에 하차했다.&lt;br /&gt;
하지만 분명 대학교를 입학하고 대학원 진학을 희망하던 그때 당시의 선택에 기로에는 여러 가지 사건들과 주변사람들의 대화 및 조언들이 복합되어 나의 책임하 선택한 나의 길이었다.&lt;br /&gt;
그리고 면밀하게 기억을 돌이켜 보면 볼수록 수많은 작은 파도들이 있었고 부딪힘이 있었다. 이러한 파도들이 지금의 나를 만든 것이라 생각한다.&lt;br /&gt;
감사의 글을 적게 된 이유도 길고 거대했던 여정 사이에 숨겨졌던 파도들을 상기시키기 위함이다.&lt;/p&gt;
&lt;p&gt;나는 어느 시점 부터인가 오픈소스에 대한 학문적 열정이 커졌다.&lt;br /&gt;
이런 열정을 느낄 수 있게 해준, 미흡했던 시절 나에게 오픈소스 중 R이란 언어를 (직)간접적으로 처음 소개했던 이석호 지도교수님께 감사드리고 싶다.&lt;br /&gt;
지금 생각해 보면 교수님은 항상 나도 모르게 제자에게 슬며시 간접적으로 영향력을 행사하는데 특별한 능력을 가지신듯 하다.&lt;/p&gt;
&lt;p&gt;지금도 그렇지만 믿을 수 없을 만큼 많은 사람들이 내가 운영 중인 블로그에 방문하고 지속적으로 지지해 주고 있다는 것을 느낀다.&lt;br /&gt;
이러한 관심이 나의 학문적 열정이란 불씨를 꺼트리지 않게 해준 양초와 같았다.&lt;br /&gt;
계속해서 아이디어를 공유하고 조화시킬 수 있는 익명의 많은 분들이 있어 나의 사고방식은 이전보다 확실히 성숙해졌다.&lt;/p&gt;
&lt;p&gt;익명의 분들 중 개인적으로 알게 된 운명적인 분들 역시 감사의 마음을 드리고 싶다.&lt;br /&gt;
서로 직면해서 이야기를 나눈 것은 2번밖에 없지만, 장문의 이메일을 주고받으며 오픈소스뿐만 아니라 컴퓨터에 전반적인 지식과 광범위한 데이터 과학의 세계로 나를 인도해준 고석범 대표님이 지금 많이 생각난다. 정말 감사드리고 싶다.&lt;br /&gt;
R에 대해 아직 모든것을 배운것이 아닌 당시 나의 어떤 모습이 도대체 마음에 들어서 책을 같이 편찬하자 제의하신지 모르겠으나, 내생에 처음이자 마지막이 될 법한 도서편찬의 기회를 주신 박찬성 실장님께 감사의 마음을 전하고 싶다.&lt;br /&gt;
나에게 또 다른 기회와 새로운 비즈니스 경험을 선사해 주신, 앞으로 계속적으로 감사의 마음이 들 것 같은 박진호 전무님께도 감사의 마음을 표시하고 싶다.&lt;/p&gt;
&lt;p&gt;사실 내 안의 아집은 남들이 일으키는 파도에 대한 방파제이었다.&lt;br /&gt;
이 방파제를 뚫고 나에게 메시지를 주기 위하여 지속적으로 파도를 일으켜 준 한국외국어대 통계학과 교수님들과, 직접적으로 도움과 후원을 해준 랩실, 그리고 대학원 동기 및 선후배 분들에 대한 그 고마움을 그당시 느끼지 못했다.&lt;br /&gt;
나는 상대적으로 보면 확실히 정적인 사람이고 요즘 말로 리액션이 약한 사람이다.&lt;br /&gt;
따라서 리액션 대신 진심어린 지금의 글을 통해 조금이나마 나의 고마움에 대한 표시를 남기고 전달하고자 한다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/diary/2016/07/01/Thanks_GS.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/diary/2016/07/01/Thanks_GS.html</guid>
        
        
        <category>Diary</category>
        
      </item>
    
      <item>
        <title>R에서 data.frame 과 data.table 에 대해 join 작업을 이용한 벤치마킹</title>
        <description>&lt;hr /&gt;
&lt;p&gt;R에서 최근에 많이 하는 작업이 있다.&lt;br /&gt;
바로 data.frame 기반으로 데이터를 인아웃풋 한 코드들을 모두 data.table 로 코드 스위칭하는 작업이다.&lt;br /&gt;
data.table 의 빠른처리속도는 이전부터 명성이 자자했지만 게으름으로 인해 고집스럽게 쓰지 않았었다.&lt;br /&gt;
하지만 인내심의 한계에 다다르고 빠른 속도를 직접 체감하고 나서 뒤늦게 도입하기 시작한 것 같다.&lt;/p&gt;
&lt;p&gt;구글링을 통해서도 다양한 data.table 의 showcase 들이 있고, 퍼포먼스를 확인할 수 있는 예제코드를 구하기 쉽다.&lt;br /&gt;
나도 그러한 예제코드를 만들어 보았고 공유해 보고자 한다.&lt;br /&gt;
나는 data.frame 과 data.table 에 대해서 join 작업을 이용해 벤치마킹 하는 코드 프로그램을 아래와 같이 작성해 보았다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(data.table)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(rbenchmark)

N=&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;

df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N),
    &lt;span class=&quot;dt&quot;&gt;group =&lt;/span&gt; LETTERS %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(N, T),
    &lt;span class=&quot;dt&quot;&gt;Var1 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
    &lt;span class=&quot;dt&quot;&gt;Var2 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df
df2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;rev,
    &lt;span class=&quot;dt&quot;&gt;Var3 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, -&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample_n&lt;/span&gt;(N*.&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df

dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt, ID)
dt2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df2); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt2, ID)

&lt;span class=&quot;kw&quot;&gt;benchmark&lt;/span&gt;(
    join_res_df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(df, df2),
    join_res_dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(dt, dt2), &lt;span class=&quot;dt&quot;&gt;replications=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 간략히 설명해 보면&lt;/p&gt;
&lt;h1 id=&quot;a-예제로-사용할-data.frame-data.table-객체-만들기&quot;&gt;A) 예제로 사용할 data.frame, data.table 객체 만들기&lt;/h1&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(data.table)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(dplyr)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(rbenchmark)

N=&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;

df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N),
    &lt;span class=&quot;dt&quot;&gt;group =&lt;/span&gt; LETTERS %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(N, T),
    &lt;span class=&quot;dt&quot;&gt;Var1 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
    &lt;span class=&quot;dt&quot;&gt;Var2 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(N, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df
df2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(
    &lt;span class=&quot;dt&quot;&gt;ID =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(N) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;rev,
    &lt;span class=&quot;dt&quot;&gt;Var3 =&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rnorm&lt;/span&gt;(N, -&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
    ) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample_n&lt;/span&gt;(N*.&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;tbl_df

dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt, ID)
dt2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;data.table&lt;/span&gt;(df2); &lt;span class=&quot;kw&quot;&gt;setkey&lt;/span&gt;(dt2, ID)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1,000,000 개의 데이터셋과 이중에서 90% 인 900,000 개의 새로운 변수를 가진 데이터셋을 서로 join 하기 위해 (의미가 별로 없는) 데이터프레임 &lt;code&gt;df&lt;/code&gt;, &lt;code&gt;df2&lt;/code&gt; 객체를 만드는 코드이다.&lt;br /&gt;
join 으로 붙여져야 하는 대상은 &amp;quot;Var3&amp;quot; 으로 명칭된 변수 &lt;span class=&quot;math inline&quot;&gt;−10&lt;/span&gt; 을 평균으로 하는 정규분포 난수이다.&lt;/p&gt;
&lt;p&gt;이후 class 만 data.table 로 바꾼 &lt;code&gt;dt&lt;/code&gt;, &lt;code&gt;dt2&lt;/code&gt; 동일내용의 객체를 준비했다.&lt;br /&gt;
data.table 에선 key variable 를 사전에 지정할 수 있는데 바로 data.table 의 &lt;code&gt;setkey()&lt;/code&gt; 함수를 통해 가능하다.&lt;br /&gt;
key 변수는 공통의 &amp;quot;ID&amp;quot; 변수를 선택하였다.&lt;br /&gt;
&lt;code&gt;setkey()&lt;/code&gt; 함수를 이용한 이와같은 key 변수 지정은 추후 join 작업의 편의성을 증대시켜주고 처리속도의 작은 개선을 기대할 수 있게 해준다.&lt;br /&gt;
무엇보다 현업시 key variable 에 대한 상기를 지속적으로 해야하는 상황에서 이렇게 명시해 줄 수 있는 도구가 있는것은 긍정적이라고 할 수 있다.&lt;br /&gt;
key variable 세팅이 제대로 되었는지가 궁금하다면 &lt;code&gt;tables()&lt;/code&gt; 함수를 통해 눈으로 확인 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;tables&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##      NAME      NROW NCOL MB COLS               KEY
## [1,] dt   1,000,000    4 20 ID,group,Var1,Var2 ID 
## [2,] dt2    900,000    2 11 ID,Var3            ID 
## Total: 31MB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;출력결과의 맨 우측 Key 항목에 &amp;quot;ID&amp;quot; 가 있는것을 보아 제대로 세팅이 된 것을 볼 수 있다.&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;b-joining&quot;&gt;B) joining&lt;/h1&gt;
&lt;p&gt;본격적으로 Joining 을 시작한다.&lt;br /&gt;
join 방법은 무난한 left join 을 실시하기 위해 dplyr package 에 있는 &lt;code&gt;left_join()&lt;/code&gt; 함수를 이용 했다.&lt;/p&gt;
&lt;p&gt;data.frame 에 대한 join 과&lt;br /&gt;
data.table 에 대한 join 수행시간을 간편하게 측정하기위해 rbenchmark package 의 &lt;code&gt;benchmark()&lt;/code&gt; 함수를 이용했다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;benchmark&lt;/span&gt;(
    join_res_df &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(df, df2, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;),
    join_res_dt &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;left_join&lt;/span&gt;(dt, dt2, &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;replications=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##                                           test replications elapsed
## 1 join_res_df &amp;lt;- left_join(df, df2, by = &amp;quot;ID&amp;quot;)           20  19.608
## 2 join_res_dt &amp;lt;- left_join(dt, dt2, by = &amp;quot;ID&amp;quot;)           20   7.667
##   relative user.self sys.self user.child sys.child
## 1    2.557    18.395    1.114          0         0
## 2    1.000     6.782    0.848          0         0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 코드는 &lt;code&gt;join_res_df &amp;lt;- left_join(df, df2, by=&amp;quot;ID&amp;quot;)&lt;/code&gt; 와 &lt;code&gt;join_res_dt &amp;lt;- left_join(dt, dt2, by=&amp;quot;ID&amp;quot;)&lt;/code&gt; 코드를 의도적으로 20번 반복 수행해 걸린 시간을 측정해주게 된다.&lt;br /&gt;
현 예제에 대한 시간측정결과 elapsed 항목을 볼 때 data.table 에 대한 join 작업의 수행속도가 data.frame 보다 약 10배 빠른 것을 볼 수 있다!&lt;/p&gt;
&lt;hr /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;&lt;code&gt;setkey()&lt;/code&gt; 함수를 통해 key variable 를 세팅하지 않았던 단계에 &lt;code&gt;tables()&lt;/code&gt; 를 실행시키면 Key 항목은 빈칸이었을 것 이다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/06/27/Benchmarking_DF_vs_DT.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/06/27/Benchmarking_DF_vs_DT.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 S3 최소재현예제</title>
        <description>&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Hands-On Programming with R (Garrett Grolemund)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;책에서 설명된 S3 에 의하면&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;제너릭 함수 (generic function)&lt;/li&gt;
&lt;li&gt;메서드 (method)&lt;/li&gt;
&lt;li&gt;클래스 (class)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3개의 기반 디스패치를 가리켜 S3라고 한다.&lt;/p&gt;
&lt;p&gt;하지만 저런용어가 쉽게 와닿지 않는 상태에서 이해하기란 쉽지 않았다.&lt;br /&gt;
때문에 R의 S3 가 무엇인지 빠르게 체감할 수 있는 나만의 아주 간단한 self 코드를 만들어 보았다.&lt;br /&gt;
최소재현예제 이므로 코드실행에 5분만 투자한다면 큰 체감을 얻을 수 있을것으로 예상된다.&lt;br /&gt;
어떠한 부가설명도 없는 코드를 아래와 같이 공유하고자 한다.&lt;/p&gt;
&lt;h1 id=&quot;s3-최소재현예제&quot;&gt;S3 최소재현예제&lt;/h1&gt;
&lt;h2 id=&quot;generic-function&quot;&gt;generic function&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  &lt;span class=&quot;kw&quot;&gt;UseMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;lovetoken&amp;quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;method&quot;&gt;method&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken.default &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  x
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken.class1 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sum&lt;/span&gt;(x), &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(x))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;lovetoken.class2 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
  &lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt;(x), &lt;span class=&quot;kw&quot;&gt;sd&lt;/span&gt;(x))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;class&quot;&gt;class&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;test &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.default(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  0  1  2  3  4  5  6  7  8  9 10&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(test) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;class1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.class1(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 55  5&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(test) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;class2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.class2(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11.000000  3.316625&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(test) &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;unknown&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;lovetoken&lt;/span&gt;(test) &lt;span class=&quot;co&quot;&gt;# `lovetoken.default(test)` 를 실행하는 것과 동일&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  0  1  2  3  4  5  6  7  8  9 10
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;unknown&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
</description>
        <pubDate>Sun, 12 Jun 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/06/12/S3.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/06/12/S3.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 구분구적법 적분과정 시뮬레이션 및 `integrate()` 함수 알아보기</title>
        <description>&lt;hr /&gt;
&lt;p&gt;내가 고등학교 이과생으로써 지낸 2학년 기억을 돌이켜 보면 적분의 방법은 이렇게 배웠던 것 같다.&lt;br /&gt;
넓이계산이 용이한 사각형을 함수와 x축 사이에 강제로 끼워 맞춤으로써 넓이를 근사시키는 과정을 취하였고,&lt;br /&gt;
특히 x축 기준 사각형을 등간격으로 잘게잘게 쪼개는 과정을 무한대로 취함으로써 적분값을 완벽히 근사시키는 법으로 적분값을 구한다 라고 말이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;fun &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x) x^&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;*x^&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;*x +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;
fun_forarea &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;function(x){
    res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fun&lt;/span&gt;(x)
    res[ x&amp;lt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; |&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;x&amp;gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; ] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;(res)
}

P &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;ggplot&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;data.frame&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;)), &lt;span class=&quot;kw&quot;&gt;aes&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;x=&lt;/span&gt;x)) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;stat_function&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;fun=&lt;/span&gt;fun) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;stat_function&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;fun=&lt;/span&gt;fun_forarea, &lt;span class=&quot;dt&quot;&gt;geom=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;area&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;fill=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;#3E5CFF&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;alpha=&lt;/span&gt;.&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;geom_hline&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;yintercept =&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) +&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;theme_bw&lt;/span&gt;()

P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/integrate-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;video   controls loop&gt;
&lt;source src=&quot;/assets/integrate_ani-.webm&quot; /&gt;
&lt;p&gt;
video of chunk integrate_ani
&lt;/p&gt;
&lt;/video&gt;
&lt;p&gt;이러한 형태로 넓이를 구하기 힘든 곡선모형의 넓이를 구하기 위해&lt;br /&gt;
충분히 작은 n개의 기본도형으로 나누어 끼워맞춘 후 넓이를 구한것을 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 이라 할 때&lt;br /&gt;
기본도형을 더 작은단위로 하여 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; 을 극한으로 보냄으로써 넓이를 근사시키는 것을 &lt;strong&gt;구분구적법&lt;/strong&gt;이라 한다.&lt;br /&gt;
즉 구분구적법은 &lt;span class=&quot;math inline&quot;&gt;lim&lt;sub&gt;&lt;em&gt;n&lt;/em&gt; → ∞&lt;/sub&gt;&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 을 계산하는 과정이다.&lt;/p&gt;
&lt;p&gt;컴퓨터는 미분이든 적분이든 사람이 손으로 풀듯이 드라마틱하게 계산할 수 있는 능력이 없을것이다.&lt;br /&gt;
구분구적법에 기반한 프로그래밍적인 계산을 통해 적분값을 계산하게 될 것인데&lt;br /&gt;
R에서는 &lt;code&gt;intergrate()&lt;/code&gt; 함수를 이용하여 적분값을 계산할 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;integrate&lt;/span&gt;(fun, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## 87.08333 with absolute error &amp;lt; 9.7e-13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;구분구적법은 기본도형을 최대한 잘게 쪼개는 과정이 필요한데&lt;br /&gt;
이를 무한히 반복하는것을 컴퓨터에게 시킨다면&lt;br /&gt;
stop 조건이 없을 경우 멈추지 않을것이다.&lt;br /&gt;
그렇다고 n을 무한으로 보내지 못하고 중간에 stop 하게 되면 적분값의 오차는 반드시 생길수 밖에 없을것이다.&lt;br /&gt;
추정컨데 &lt;code&gt;integrate()&lt;/code&gt; 함수를 실행시키고 출력되는 &amp;quot;absolute error&amp;quot; 문구가 출력된 이유가 이것때문일 것이라 생각된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;integrate()&lt;/code&gt; 함수 사용방법은 간편하다.&lt;br /&gt;
계산을 하고싶은 함수를 첫번째 인자에 넘겨주고,&lt;br /&gt;
폐구간에 대한 정보를 &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;upper&lt;/code&gt; 인자에 넘겨주기만 하면 적분값을 계산해 준다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/06/06/integate_function.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/06/06/integate_function.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 중심극한의 정리를 animation ploting 을 통해 시뮬레이션 하기</title>
        <description>&lt;hr /&gt;
&lt;p&gt;통계 비전공자에게 중심극한의 정리를 설명해야 했던 적이 있었는데,&lt;br /&gt;
심오한 이론들을 증명하며 설명하느니 한번 보여주는 것이 더 큰 공감을 얻게될 것 같아 animation plot 을 준비한적이 있다.&lt;br /&gt;
본 포스팅 글은 R markdown 포맷에서 코드청크옵션 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 을 통해 animation plot 을 준비하는 것이 가능하다는 것을 소개하고 그 예시로 중심극한정리 시뮬레이션을 통해 설명할 것이다.&lt;/p&gt;
&lt;h1 id=&quot;a-중심극한정리-central-limit-theorem-에-대해서&quot;&gt;A) 중심극한정리 (Central Limit Theorem) 에 대해서&lt;/h1&gt;
&lt;p&gt;중심극한정리는 표본의 크기가 커짐에 따라 표본평균의 분포가 점점 정규분포로 근사(닮아) 짐을 의미하는 이론이다.&lt;br /&gt;
그리고 표본은 어떠한 분포 타입에 나온 것이더라 하더라도 상관없이 중심극한정리에 해당되는것을 특징으로 한다.&lt;br /&gt;
여기서 헷갈리는 것이 있을 수 있는데, 표본평균은 단하나의 값으로 분포가 될 수 있느냐 라는 질문이 생길 수 있다.&lt;br /&gt;
이 궁금증은 표본 자체가 확률변수라는 것으로써 이해할 수 있다.&lt;br /&gt;
표본 자체가 확률변수이므로 이를 종합하여 평균한 값 하나일지라도 분명 확률변수이며 이는 분포로써 설명이 가능하다.&lt;br /&gt;
하지만 시뮬레이션에서 사용할 표본평균은 단 한 개 가지고는 분포를 시각적으로 볼 수 없다.&lt;br /&gt;
따라서 표본평균들을 여러 개 발생시킬 것이다.&lt;/p&gt;
&lt;p&gt;정리하면 시뮬레이션 시 특정 분포에 대해 많은 표본을 뽑은 후 표본평균계산 후 이를 반복해서 다양한 표본평균들을 준비해 히스토그램으로 분포를 확인할 것이다.&lt;br /&gt;
또한 표본의 크기가 커짐에 따라 정규분포로 닮아진다는 것을 보여주는 것과 동시에 점근적으로 보여주는 것이 시뮬레이션의 큰 의미라고 볼 수 있다.&lt;/p&gt;
&lt;p&gt;우선 현 시뮬레이션에선&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정분포를 포아송분포 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;X&lt;/em&gt; ∼ &lt;em&gt;P&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;i&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;&lt;em&gt;s&lt;/em&gt;&lt;em&gt;o&lt;/em&gt;&lt;em&gt;n&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt; = 10)&lt;/span&gt; 으로&lt;/li&gt;
&lt;li&gt;표본개수는 n=500 으로 통일하고&lt;/li&gt;
&lt;li&gt;표본평균들을 1,000개 준비하기 위해 위 과정을 1000번 반복&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;할 것이다.&lt;/p&gt;
&lt;h1 id=&quot;b-단편-시뮬레이션&quot;&gt;B) 단편 시뮬레이션&lt;/h1&gt;
&lt;p&gt;위에서 설명한 시뮬레이션은 아래코드를 통해 확인 가능하다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
    n &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;
    sample &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;lambda=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sample)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 통해 1000개의 표본평균들이 &lt;code&gt;res&lt;/code&gt; 객체에 담겨있게된다.&lt;br /&gt;
정규분포로 근사되었는지 분포를 확인하는건 2가지 방법을 통해 해보고자 한다.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;히스토그램과 밀도추정선을 덧그린 plot&lt;/li&gt;
&lt;li&gt;Quantile-Quantile Plots&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;hist&lt;/span&gt;(res, &lt;span class=&quot;dt&quot;&gt;freq=&lt;/span&gt;F); &lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;density&lt;/span&gt;(res), &lt;span class=&quot;dt&quot;&gt;lty=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/CLT1-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;1번에 해당되는 히스토그램이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;qqnorm&lt;/span&gt;(res)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/CLT2-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;2번에 해당하는 소위 QQplot 이다.&lt;/p&gt;
&lt;p&gt;분명 결과물을 통해선 포아송분포에서 뽑은 표본들의 평균의 분포가 정규분포에 근사하는 것을 체감할 수는 있다.&lt;br /&gt;
하지만 나는 이것보다 분포의 개수가 많으면 많아질수록 정규분포의 닮아짐이 높아진다는 점근적근사를 시각적으로 보여주고 싶은 것이었다.&lt;/p&gt;
&lt;h1 id=&quot;c-rmarkdown-의-코드청크옵션-fig.showanimate-에-대해서&quot;&gt;C) Rmarkdown 의 코드청크옵션 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 에 대해서&lt;/h1&gt;
&lt;p&gt;필자는 Rmarkdown 포맷을 자주 사용하여 내 지식을 전달하는 편인데 데이터분석과 융화된 글을 쓰기에 거리낌 없는 도구로 굉장한 공감을 얻었기 때문이다.&lt;br /&gt;
특히 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 와 같은 코드청크 옵션은 데이터의 변질에 따른 plot output 의 변화를 보여주기에 간편한 기능을 제공해서 적극적으로 애용 중이다.&lt;/p&gt;
&lt;p&gt;위의 예시를 이어서 설명하자면 단편적인 시뮬레이션을 통해 정규분포에 근사하는 것을 체감시켰지만,&lt;br /&gt;
이보다 더 중요한 것을 설명하기 위해 표본개수 즉 표본평균을 계산한 반복회수가 증가함으로써 일어나는 정규근사 정도를 animation ploting 통해 보여줄 것이다.&lt;/p&gt;
&lt;p&gt;아래처럼 말이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(numbers) &lt;span class=&quot;co&quot;&gt;# for fibonacci function&lt;/span&gt;
ani_N &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(); for(i in &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;) ani_N[i&lt;span class=&quot;dv&quot;&gt;-4&lt;/span&gt;] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fibonacci&lt;/span&gt;(i)
ani_N&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1]      5      8     13     21     34     55     89    144    233    377
## [11]    610    987   1597   2584   4181   6765  10946  17711  28657  46368
## [21]  75025 121393 196418 317811 514229 832040&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(N in ani_N){
    res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
        n &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;
        sample &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;lambda=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sample)
    })
    &lt;span class=&quot;kw&quot;&gt;hist&lt;/span&gt;(res, &lt;span class=&quot;dt&quot;&gt;freq=&lt;/span&gt;F, &lt;span class=&quot;dt&quot;&gt;ylim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;xlim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)); &lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;density&lt;/span&gt;(res), &lt;span class=&quot;dt&quot;&gt;lty=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;video   controls loop&gt;
&lt;source src=&quot;/assets/CLT1_ani-.webm&quot; /&gt;
&lt;p&gt;
video of chunk CLT1_ani
&lt;/p&gt;
&lt;/video&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(N in ani_N){
    res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(N, &lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
        n &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;
        sample &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;rpois&lt;/span&gt;(n, &lt;span class=&quot;dt&quot;&gt;lambda=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;mean&lt;/span&gt;(sample)
    })
    &lt;span class=&quot;kw&quot;&gt;qqnorm&lt;/span&gt;(res, &lt;span class=&quot;dt&quot;&gt;xlim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;ylim=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;video   controls loop&gt;
&lt;source src=&quot;/assets/CLT2_ani-.webm&quot; /&gt;
&lt;p&gt;
video of chunk CLT2_ani
&lt;/p&gt;
&lt;/video&gt;
&lt;p&gt;위의 B장에서 수행했던 코드의 본체는 부수적인 차이만 존재할 뿐 거의 흡사하다.&lt;br /&gt;
차이점은 시뮬레이션 본체코드를 for 문을 통해 &lt;code&gt;ani_N&lt;/code&gt; 의 피보나치수열로 반복회수를 조정한것이며,&lt;br /&gt;
시각화 코드인 &lt;code&gt;hist()&lt;/code&gt;, &lt;code&gt;qqnorm()&lt;/code&gt; 함수에 &lt;code&gt;xlim&lt;/code&gt;, &lt;code&gt;ylim&lt;/code&gt; 인자값들을 부여해 범위를 고정시켰다는 차이가 있다.&lt;br /&gt;
그리고 본장에서 설명하고자 차이점은 사실 R코드가 아닌 Rmarkdown 코드청크옵션에 내막이 있다.&lt;br /&gt;
verbatim 모드로 Rmarkdown 코드청크 전체를 보여주면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# ```{r fig.show=&amp;quot;animate&amp;quot;, interval=.4}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# for(N in ani_N){&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   res &amp;lt;- replicate(N, expr={&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       n &amp;lt;- 500&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       sample &amp;lt;- rpois(n, lambda=10)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       mean(sample)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   })&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   hist(res, freq=F, ylim=c(0, 7), xlim=c(9, 11)); lines(density(res), lty=2, col=&amp;quot;blue&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# ```&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 코드청크에 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;, interval=.4&lt;/code&gt; 와 같은 옵션이 존재하지 않는다면&lt;br /&gt;
&lt;code&gt;ani_N&lt;/code&gt; 의 마지막 값에 대한 중심극한 시뮬레이션 histogram 결과만 나올것이다.&lt;br /&gt;
실제 수행된 코드는 &lt;code&gt;ani_N&lt;/code&gt; 에 담겨있는 수열들의 값대로 히스토그램을 그리겠지만 결국 출력되는건 마지막 값에 해당되는 단편 시뮬레이션 plot output 이다.&lt;/p&gt;
&lt;p&gt;하지만 코드청크에 &lt;code&gt;fig.show=&amp;quot;animate&amp;quot;&lt;/code&gt; 를 부여하면 중간중간에 출력되는 plot output 을 임시로 모두 저장하게된다.&lt;br /&gt;
이후 코드청크의 &lt;code&gt;interval&lt;/code&gt; 옵션값만큼의 간격으로 저장된 plot output 프레임들을 순차적으로 인코딩하여 영상을 만든다!&lt;br /&gt;
지금은 interval 값을 0.4초로 지정했는데 프레임 넘김을 더 빠르게 하고싶은 경우 이값을 작게 조정하여 희망하는 속도로 맞출 수 있다.&lt;br /&gt;
그리하여 피보나치수열 대로 표본이 증가하면 증가할수록 정규분포로 근사되는것을 시각적으로 볼 수 있게 되는 것이다.&lt;/p&gt;
&lt;p&gt;QQplot animation 도 마찬가지 형태이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# ```{r fig.show=&amp;quot;animate&amp;quot;, interval=.4}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# for(N in ani_N){&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   res &amp;lt;- replicate(N, expr={&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       n &amp;lt;- 500&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       sample &amp;lt;- rpois(n, lambda=10)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#       mean(sample)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   })&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   qqnorm(res, xlim=c(-4, 4), ylim=c(9, 11))&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# }&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# ```&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;d-요구사항&quot;&gt;D) 요구사항&lt;/h1&gt;
&lt;p&gt;단 이렇게 영상으로 인코딩하는 작업을 하기 위해서 운영체계별로 요구하는 플러그인이 다를 수 있다.&lt;br /&gt;
필자는 OSX 에서 이 글을 작성한 것이며 &lt;a href=&quot;https://www.ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt; 설치가 요구되었었다.&lt;/p&gt;
&lt;p&gt;그리고 이것이 요구사항일지는 모르겠지만 코드수행시간이란 비용 이외에 animation plot 영상을 인코딩하는 시간 역시 필요하다.&lt;br /&gt;
위의 예제처럼 간단한 수준의 짧은 영상을 만드는 것은 인코딩시간이 조금 걸리지만,&lt;br /&gt;
그렇지 않으면 많은 인내심이 요구될 수 있다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Thu, 26 May 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/05/26/CLT.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/05/26/CLT.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 수익률 구해보며 `lag()`, `diff()` 함수 알아보기</title>
        <description>&lt;hr /&gt;
&lt;p&gt;시계열 데이터의 수익률을 계산하는 일들이 많아지면서&lt;br /&gt;
복잡한 모듈들을 만들 때 아래의 함수들과 패키지가 얼마나 유용한지 몰랐었다.&lt;/p&gt;
&lt;p&gt;오늘 정리해보고자 하는 함수는 3가지이며, 부가적으로 시계열 데이터셋에 날짜의 전처리 부담을 줄여주는 xts package 를 조금씩 이용해보려 한다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(xts)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;a-예제-데이터-만들기&quot;&gt;A) 예제 데이터 만들기&lt;/h1&gt;
&lt;p&gt;오늘 날짜를 기준으로 약 한 달 전 까지의 코스닥 지수를 예제 데이터로 이용해 보고자 한다. (본 포스팅 글의 오늘 날짜는 스크립트를 작성한 기준 날짜를 기준으로 한다)&lt;br /&gt;
R에서는 특정 주가지수를 자동으로 불러올 수 있는 유용한 패키지가 있는데 바로 quantmod package이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(quantmod)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;quantmod package는 앞서 말한 xts package와 종속관계 이므로 quantmod package를 로드하면 같이 함께 로드된다. (zoo package 도 마찬가지 이다.)&lt;br /&gt;
여하튼 KOSPI 지수를 받기 위한 코드는 아래와 같다. &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;today &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;Sys.Date&lt;/span&gt;()
kq &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;getSymbols&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;^kq11&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;from=&lt;/span&gt;today&lt;span class=&quot;dv&quot;&gt;-30&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;to=&lt;/span&gt;today, &lt;span class=&quot;dt&quot;&gt;auto.assign=&lt;/span&gt;F)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##     As of 0.4-0, &amp;#39;getSymbols&amp;#39; uses env=parent.frame() and
##  auto.assign=TRUE by default.
## 
##  This  behavior  will be  phased out in 0.5-0  when the call  will
##  default to use auto.assign=FALSE. getOption(&amp;quot;getSymbols.env&amp;quot;) and 
##  getOptions(&amp;quot;getSymbols.auto.assign&amp;quot;) are now checked for alternate defaults
## 
##  This message is shown once per session and may be disabled by setting 
##  options(&amp;quot;getSymbols.warning4.0&amp;quot;=FALSE). See ?getSymbols for more details.&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;kq; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(kq)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##            KQ11.Open KQ11.High KQ11.Low KQ11.Close KQ11.Volume
## 2016-04-18    695.78    695.98   693.00     695.34      706800
## 2016-04-19    697.31    701.80   696.22     701.68      684100
## 2016-04-20    703.55    704.44   699.85     699.86      737300
## 2016-04-21    702.21    702.32   698.39     701.62      834100
## 2016-04-22    702.90    703.89   700.98     703.05      702700
## 2016-04-25    705.37    705.44   702.42     703.70      700200
## 2016-04-26    705.51    705.51   700.76     702.06      778200
## 2016-04-27    704.42    704.59   699.41     699.52      757000
## 2016-04-28    702.04    703.95   699.68     699.70      665300
## 2016-04-29    699.89    700.14   695.82     699.77      645800
## 2016-05-02    700.43    700.74   690.27     690.27      681200
## 2016-05-03    693.67    699.24   693.67     698.66      819100
## 2016-05-04    698.02    698.30   693.25     694.17      826600
## 2016-05-09    696.66    697.14   690.85     691.82      630400
## 2016-05-10    693.47    700.53   693.44     700.23      570000
## 2016-05-11    704.32    704.53   701.29     703.94      637900
## 2016-05-12    702.46    706.49   699.87     705.04      614200
## 2016-05-13    705.85    705.92   703.65     704.37      617600
## 2016-05-16    705.03    705.04   701.25     701.46      660200
## 2016-05-17    703.08    703.24   693.07     695.95      712200
##            KQ11.Adjusted
## 2016-04-18        695.34
## 2016-04-19        701.68
## 2016-04-20        699.86
## 2016-04-21        701.62
## 2016-04-22        703.05
## 2016-04-25        703.70
## 2016-04-26        702.06
## 2016-04-27        699.52
## 2016-04-28        699.70
## 2016-04-29        699.77
## 2016-05-02        690.27
## 2016-05-03        698.66
## 2016-05-04        694.17
## 2016-05-09        691.82
## 2016-05-10        700.23
## 2016-05-11        703.94
## 2016-05-12        705.04
## 2016-05-13        704.37
## 2016-05-16        701.46
## 2016-05-17        695.95&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;xts&amp;quot; &amp;quot;zoo&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다양한 메시지와 함께 우리가 보고 싶은 결과물을 xts class 객체로 반환한다.&lt;br /&gt;
&lt;code&gt;getSymbols()&lt;/code&gt; 함수의 쓰임 법에 대해서 간략히 설명하자면 조회하고자 하는 주가 심볼 문자열을 첫 번째 인자값으로 넣고 &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;to&lt;/code&gt; 인자에 조회 날짜에 대한 기간 정보를 넣어줌으로써 활용이 가능하다.&lt;br /&gt;
예제데이터로 사용될 우리가 선택한 코스닥 심볼은 &#39;^kq11&#39; 이다.&lt;br /&gt;
만약 다른 것을 조회하고 싶다면 해당되는 심볼을 찾은 후 기입하면 된다. (ex. 코스피200지수의 경우 &#39;^ks11&#39;)&lt;/p&gt;
&lt;p&gt;반환된 결과물을 보면 open, high, low, close, volume, adjusted 6개의 상황별 지수가 있는데 종가지수인 close 만 관심의 대상이라 가정하고 subset 을 추출한 데이터 &lt;code&gt;data&lt;/code&gt; 를 최종 예제데이터로 삼겠다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;data &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;kq[,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;b-일일-수익률-계산하기&quot;&gt;B) 일일 수익률 계산하기&lt;/h1&gt;
&lt;p&gt;예제데이터를 이용하여 일일 수익률을 계산해 보겠다.&lt;br /&gt;
예를 들어 2016년 4월 19일의 수익률을 계산하기 위해선 해당 시차 지수 701.68 을 직전날시차 지수 695.34 로 나눠 준 후 1을 빼면 된다.&lt;br /&gt;
이것을 모든 날에 대해 일괄적으로 행하여야 한다.&lt;br /&gt;
이를 간편하게 계산하기 위해 &lt;code&gt;lag()&lt;/code&gt; 함수가 유용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##            KQ11.Close
## 2016-04-18     695.34
## 2016-04-19     701.68
## 2016-04-20     699.86
## 2016-04-21     701.62
## 2016-04-22     703.05
## 2016-04-25     703.70
## 2016-04-26     702.06
## 2016-04-27     699.52
## 2016-04-28     699.70
## 2016-04-29     699.77
## 2016-05-02     690.27
## 2016-05-03     698.66
## 2016-05-04     694.17
## 2016-05-09     691.82
## 2016-05-10     700.23
## 2016-05-11     703.94
## 2016-05-12     705.04
## 2016-05-13     704.37
## 2016-05-16     701.46
## 2016-05-17     695.95&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;lag&lt;/span&gt;(data)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##            KQ11.Close
## 2016-04-18         NA
## 2016-04-19     695.34
## 2016-04-20     701.68
## 2016-04-21     699.86
## 2016-04-22     701.62
## 2016-04-25     703.05
## 2016-04-26     703.70
## 2016-04-27     702.06
## 2016-04-28     699.52
## 2016-04-29     699.70
## 2016-05-02     699.77
## 2016-05-03     690.27
## 2016-05-04     698.66
## 2016-05-09     694.17
## 2016-05-10     691.82
## 2016-05-11     700.23
## 2016-05-12     703.94
## 2016-05-13     705.04
## 2016-05-16     704.37
## 2016-05-17     701.46&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;날짜에 대한 처리 없이 알아서 주가 데이터가 하루 미루어진다.&lt;br /&gt;
&lt;code&gt;lag()&lt;/code&gt; 함수의 두번째 인자는 &lt;code&gt;k=1&lt;/code&gt; 로 디폴트값이 잡혀있는데, 이를 조정하는것도 가능하다.&lt;br /&gt;
&lt;code&gt;data&lt;/code&gt; 와 &lt;code&gt;lag(data)&lt;/code&gt; 를 나누고 상수 1을 뺌으로써 간단히 일일수익률을 계산할 수 있게 된다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;data/&lt;span class=&quot;kw&quot;&gt;lag&lt;/span&gt;(data)-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##               KQ11.Close
## 2016-04-18            NA
## 2016-04-19  0.0091177924
## 2016-04-20 -0.0025937864
## 2016-04-21  0.0025148030
## 2016-04-22  0.0020381303
## 2016-04-25  0.0009245772
## 2016-04-26 -0.0023305584
## 2016-04-27 -0.0036178931
## 2016-04-28  0.0002573079
## 2016-04-29  0.0001000543
## 2016-05-02 -0.0135758888
## 2016-05-03  0.0121545957
## 2016-05-04 -0.0064265740
## 2016-05-09 -0.0033853034
## 2016-05-10  0.0121563021
## 2016-05-11  0.0052982907
## 2016-05-12  0.0015625991
## 2016-05-13 -0.0009502766
## 2016-05-16 -0.0041313131
## 2016-05-17 -0.0078550592&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;일일수익률이므로 직전시차 데이터가 존재하지 않는 4월 18일 수익률만 결측치로 나오고 이후 시차는 수익률을 잘 산출해 준다.&lt;br /&gt;
만약 &lt;code&gt;lag()&lt;/code&gt; 함수를 알지 못한다면 아래와 같은 해괴망측한 수동적인 코드로써 구현해야 했을 것이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;data
res[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;NA&lt;/span&gt;

for(i in &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;kw&quot;&gt;nrow&lt;/span&gt;(data)){
    res[i] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;data[[i]]/data[[i&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;]]-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
} &lt;span class=&quot;co&quot;&gt;# T_T.....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;c-로그수익률-계산하기&quot;&gt;C) 로그수익률 계산하기&lt;/h1&gt;
&lt;p&gt;만약 일일 로그수익률을 계산하고 싶다면 현시차 주가를 직전시차주가로 나눠준 후 로그함수를 씌워주면 되는데&lt;br /&gt;
방금 알게된 &lt;code&gt;lag()&lt;/code&gt; 함수를 이용하면&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;(data) -&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lag&lt;/span&gt;(data))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##               KQ11.Close
## 2016-04-18            NA
## 2016-04-19  0.0090764763
## 2016-04-20 -0.0025971561
## 2016-04-21  0.0025116462
## 2016-04-22  0.0020360562
## 2016-04-25  0.0009241501
## 2016-04-26 -0.0023332784
## 2016-04-27 -0.0036244535
## 2016-04-28  0.0002572748
## 2016-04-29  0.0001000493
## 2016-05-02 -0.0136688838
## 2016-05-03  0.0120813217
## 2016-05-04 -0.0064473133
## 2016-05-09 -0.0033910465
## 2016-05-10  0.0120830076
## 2016-05-11  0.0052843042
## 2016-05-12  0.0015613795
## 2016-05-13 -0.0009507284
## 2016-05-16 -0.0041398706
## 2016-05-17 -0.0078860727&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;의 코드로 일일 로그수익률을 계산할 수 있다.&lt;br /&gt;
그런데 &lt;code&gt;log()&lt;/code&gt;, &lt;code&gt;lag()&lt;/code&gt; 비슷비슷한 함수들이 있어 눈에 확 띄지 않고 복잡해 보인다.&lt;br /&gt;
현재는 현시차와 직전시차의 차이값을 구하는 과정이 필요하다.&lt;br /&gt;
이 차이를 자동으로 계산해주는 함수가 &lt;code&gt;diff()&lt;/code&gt; 이다.&lt;br /&gt;
&lt;code&gt;diff()&lt;/code&gt; 함수를 이용하여 코드를 더 간결하게 해본 결과이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;log&lt;/span&gt;(data))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##               KQ11.Close
## 2016-04-18            NA
## 2016-04-19  0.0090764763
## 2016-04-20 -0.0025971561
## 2016-04-21  0.0025116462
## 2016-04-22  0.0020360562
## 2016-04-25  0.0009241501
## 2016-04-26 -0.0023332784
## 2016-04-27 -0.0036244535
## 2016-04-28  0.0002572748
## 2016-04-29  0.0001000493
## 2016-05-02 -0.0136688838
## 2016-05-03  0.0120813217
## 2016-05-04 -0.0064473133
## 2016-05-09 -0.0033910465
## 2016-05-10  0.0120830076
## 2016-05-11  0.0052843042
## 2016-05-12  0.0015613795
## 2016-05-13 -0.0009507284
## 2016-05-16 -0.0041398706
## 2016-05-17 -0.0078860727&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;주가종목에 로그를 취한 후 현시차와 직전시차의 차이값을 &lt;code&gt;diff()&lt;/code&gt; 를 통해 계산한다.&lt;br /&gt;
따라서 &lt;code&gt;log(data) - log(lag(data))&lt;/code&gt; 과 동일한 값이 반환되는 것을 확인할 수 있다.&lt;/p&gt;
&lt;hr /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;필자는 quantmod package와, 주가지수데이터셋을 끌어올 수 있는 함수 및 코드를 &lt;a href=&quot;http://cafe.naver.com/lovetokens/1569&quot;&gt;카페회원분의 질문글&lt;/a&gt;을 통해 처음으로 알게 되었다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/05/18/lag_diff_function.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/05/18/lag_diff_function.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 소리, 음원 재생하기 - tuneR, beepr package</title>
        <description>&lt;hr /&gt;
&lt;p&gt;코드수행시간이 비교적 길었던 R 스크립트가 있었다.&lt;br /&gt;
Run 이후 마냥 기다리긴 귀찮고, 딴짓을 하기엔 코드 수행시간이 그렇게도 길지 않은 코드여서&lt;br /&gt;
코드 수행이 끝났다는 알람을 줄 수 있는 방법을 찾고 싶었는데, 알람의 방법은 크게 2가지 정도를 원했었다.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;문자나 메일을 받는 방법&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;비프음 등의 소리를 재생&lt;/strong&gt; 👈&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;시켜 코드수행이 끝났다는 걸 알려주는 것 이다.&lt;br /&gt;
첫번째 &amp;quot;문자나 메일을 받는 방법&amp;quot; 은 구체적인 방법을 찾기 힘들었는데, 두번째 &amp;quot;비프음 등의 소리를 재생&amp;quot; 방법을 알아본 결과 패키지를 이용한 아주 간단한 방법이 있었다.&lt;br /&gt;
지금까지 알게 된 방법들을 간단히 정리해본다.&lt;/p&gt;
&lt;h1 id=&quot;a-beepr-package-를-이용해-비프음-재생시키기&quot;&gt;A) beepr package 를 이용해 비프음 재생시키기&lt;/h1&gt;
&lt;p&gt;비프음을 재생시키기 위한 단 한개의 함수를 제공해 주는 패키지가 있다. (역시 심플하고 가벼운 것이 최고다!)&lt;br /&gt;
패키지명칭도 beepr 이다.&lt;br /&gt;
제공되는 함수는 &lt;code&gt;beep()&lt;/code&gt; 이다. 즉 &lt;code&gt;beepr::beep()&lt;/code&gt; 로 내가원하는 비프음을 재생시킬 수 있었다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;install.packages&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;beepr&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(beepr)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;beepr package 설치 및 로드하고&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;beep&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;를 직접 실행시켜 보면 마치 전자레인지 가동이 종료될 때의 &amp;quot;ping!&amp;quot; 소리가 난다 🎵🎵&lt;/p&gt;
&lt;p&gt;&lt;code&gt;beep()&lt;/code&gt; 함수에서 제공되는 사운드는 아래처럼 11개가 있다.&lt;br /&gt;
기호에 맞게 &lt;code&gt;sound&lt;/code&gt; 인자를 조정해 사용하면 된다.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;ping&lt;/li&gt;
&lt;li&gt;coin&lt;/li&gt;
&lt;li&gt;fanfare&lt;/li&gt;
&lt;li&gt;complete&lt;/li&gt;
&lt;li&gt;treasure&lt;/li&gt;
&lt;li&gt;ready&lt;/li&gt;
&lt;li&gt;shotgun&lt;/li&gt;
&lt;li&gt;mario&lt;/li&gt;
&lt;li&gt;wilhelm&lt;/li&gt;
&lt;li&gt;facebook&lt;/li&gt;
&lt;li&gt;sword&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;b-만약-특정-음원파일을-재생시키고-싶다면-tuner-package&quot;&gt;B) 만약 특정 음원파일을 재생시키고 싶다면 tuneR package&lt;/h1&gt;
&lt;p&gt;소리재생에 관련된 포괄적인 패키지를 찾아본적도 있는데, 그 패키지 안에는 특정음원파일을 재생시키는 기능도 있을것이라 생각했다.&lt;br /&gt;
나는 tuneR 패키지가 눈에 띄었는데 이 패키지 에서 자신이 가지고 있는 음원파일을 재생시키는 기능을 가진 &lt;code&gt;play()&lt;/code&gt; 함수가 있다. (더 정확히 말하면 Wave class 의 객체만을 실행시키는 함수이다.)&lt;/p&gt;
&lt;p&gt;그 전에 특정음원파일을 읽어들여 정보를 보관할 객체를 준비해야 할 필요가 있다. 음원 포맷이 mp3 이라면 &lt;code&gt;readMP3()&lt;/code&gt; 와 같은 함수가 이를 도와준다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;install.packages&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;tuneR&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(tuneR)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;역시 tuneR 패키지를 설치하고 사용할 준비를 한다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;mp3 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;readMP3&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;test.wav&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;play&lt;/span&gt;(mp3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 워킹디렉토리에 있는 &amp;quot;Test.mp3&amp;quot; 파일을 불러온 후 R에서 재생시키는 코드이다.&lt;/p&gt;
&lt;h1 id=&quot;c-두-패키지의-차이점&quot;&gt;C) 두 패키지의 차이점&lt;/h1&gt;
&lt;p&gt;위에 비프음을 재생시키는 beepr 패키지와 다르게 tuneR 패키지의 &lt;code&gt;play()&lt;/code&gt; 함수는 기본적으로 외부 플레이어를 이용한다는 점에서 차이점이 있다.&lt;br /&gt;
따라서 &lt;code&gt;beep()&lt;/code&gt; 는 R내에서 이용하는데 용이하지만 tuneR 패키지와 조합한 &lt;code&gt;play()&lt;/code&gt; 함수는 활성화되는 프로그램이 R 에서 외부 플레이어 어플리케이션으로 넘어가 버린다. 그리고 beepr 과 달리 tuneR 은 운영체계 별로 사용법이 상이하다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Sat, 30 Apr 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/04/30/playsound_in_R.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/04/30/playsound_in_R.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 클립보드의 내용물을 끌어오기</title>
        <description>&lt;hr /&gt;
&lt;p&gt;편하게 데이터를 R에서 불러들이기 위해 간편한 방법이 없을까?&lt;br /&gt;
보통 csv파일을 읽어들이기 위해서 csv파일이 있는 경로를 알고 그경로를 입력해 주어야 한다.&lt;br /&gt;
아래의 코드처럼 말이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;data &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;read.csv&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;./Data/Test.csv&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;워킹디렉토리에서 Data 폴더의 Test.csv 을 읽어들이는 코드이다.&lt;br /&gt;
하지만 간단히 눈앞에 있는 데이터를 R로 불러들이기 위해선 그 데이터 파일의 path 를 알아야 하는 것이 귀찮을 수 있다.&lt;br /&gt;
이러한 귀차니즘까지 발동한다면 Clipboard 를 이용하여 원하는 데이터를 로드하는 것이 현명한 것 같다.&lt;/p&gt;
&lt;h2 id=&quot;on-windows&quot;&gt;on Windows&lt;/h2&gt;
&lt;p&gt;예를 들어 아래의 모습처럼 우리가 사용하고자 하는 Test.csv 파일이 MS office Excel 에서 열린 상황의 모습이고,&lt;br /&gt;
이것을 R에서 빨리 불러오고 싶다 가정한다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Clipboard_Windows.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;다음과 같은 스텝을 따른다.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Test.csv 파일의 데이터셋을 전체 선택하여 &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; 를 한다.&lt;/li&gt;
&lt;li&gt;R로 되돌어가 &lt;code&gt;read.table(&amp;quot;clipboard&amp;quot;)&lt;/code&gt; 를 실행하여 복사했던 데이터가 제대로 불러와 졌는지 확인한다.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;필요에 따라 &lt;code&gt;read.table()&lt;/code&gt; 함수의 &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;sep&lt;/code&gt; 인자값을 바꾸어 불러온다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;직접 해본 결과의 스크린샷이다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Clipboard_Windows2.png&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;read.table&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;clipboard&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##     V1   V2
## 1  Var Test
## 2    a   14
## 3    b   25
## 4    d  646
## 5    e  773
## 6    g   12
## 7    n   45
## 8    h    3
## 9    s    6
## 10   x   72&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;read.table&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;clipboard&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;header=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##   Var Test
## 1   a   14
## 2   b   25
## 3   d  646
## 4   e  773
## 5   g   12
## 6   n   45
## 7   h    3
## 8   s    6
## 9   x   72&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;on-mac&quot;&gt;on Mac&lt;/h2&gt;
&lt;p&gt;맥이용자라면 윈도우의 &lt;code&gt;&amp;quot;clipboard&amp;quot;&lt;/code&gt; 와 같은 약속어로 클립보드 내용물을 불러들일 수 없는것을 확인했다.&lt;br /&gt;
&lt;code&gt;&amp;quot;clipboard&amp;quot;&lt;/code&gt; 대신 &lt;code&gt;pipe(&amp;quot;pbpaste&amp;quot;)&lt;/code&gt; 을 이용한다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Clipboard_Mac.png&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;read.table&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;pbpaste&amp;quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##     V1   V2
## 1  Var Test
## 2    a   14
## 3    b   25
## 4    d  646
## 5    e  773
## 6    g   12
## 7    n   45
## 8    h    3
## 9    s    6
## 10   x   72&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;read.table&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;pbpaste&amp;quot;&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;header=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##   Var Test
## 1   a   14
## 2   b   25
## 3   d  646
## 4   e  773
## 5   g   12
## 6   n   45
## 7   h    3
## 8   s    6
## 9   x   72&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 Clipboard 로 데이터를 불러오는 것 이므로 데이터 전체가 아닌 일부분만을 복사하는 것도 가능하다. 아래의 스크린샷은 데이터의 앞 3개의 필드를 복사하여 R로 불러들여본 결과이다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Clipboard_Mac2.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;이처럼 Clipboard 를 이용하게 되면 사용하고 싶은 데이터를 선택하여 R로 마치 드레그 하는 방식과 같아진다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Sat, 16 Apr 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/04/16/using_clipboard.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/04/16/using_clipboard.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 범용적으로 진행표시줄(progress bar)을 구현할 수 있는 progress package</title>
        <description>&lt;hr /&gt;
&lt;p&gt;이전에 R에서 진행표시줄(progress bar) 을 만들기 위해 &lt;a href=&quot;http://cafe.naver.com/lovetokens/1378&quot;&gt;windows OS 에서 작동되는 &lt;code&gt;winProgressBar()&lt;/code&gt; 함수에 대해서 설명한 적&lt;/a&gt;이 있다.&lt;br /&gt;
아쉽게도 윈도우 이외 다른 운영체계에서는 이 함수가 지원되지 않는다.&lt;br /&gt;
결국 상호호환의 문제로 다른 방안을 찾아보아야 하는 상황이 일어났는데 어떠한 운영체계라 하더라도 R에서 진행표시줄을 나타내기 위한 방법을 찾아 정리해보고자 한다.&lt;/p&gt;
&lt;p&gt;지금까지 찾아본 방법중 가장 좋은 것은 progress package 를 이용하는 것 이었다.&lt;/p&gt;
&lt;h1 id=&quot;a-example-code&quot;&gt;A) example code&lt;/h1&gt;
&lt;p&gt;이전에 포스팅한 글을 빌려 똑같은 예제를 이용해 보겠다.&lt;/p&gt;
&lt;p&gt;임의의 코드를 1000번 반복하는 for문 이며, 반복의 대상이 되는 코드의 내용물 은 상당히 복잡할 것으로 가정한다.&lt;br /&gt;
예를 들어 반복의 대상이 되는 코드를 한번 수행하는데 걸리는 시간이 iteration 에 상관없이 공통으로 0.01초 라면 for 문이 모두 돌아가기 까지 소요되는 시간은 10초가 된다.&lt;br /&gt;
이러한 가정을 정확하게 구현하는 코드가 바로 아래 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;for(i in &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)){

    &lt;span class=&quot;kw&quot;&gt;Sys.sleep&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;0.01&lt;/span&gt;)

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;b-progress-package-를-이용해-진행표시줄-만들기&quot;&gt;B) progress package 를 이용해 진행표시줄 만들기&lt;/h1&gt;
&lt;p&gt;progress package 를 로드&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;한다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;progress&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 다음 위의 예제코드에 몇 가지 코드를 덧붙인다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;pb &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;progress_bar$&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;total=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)

for(i in &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)){

    pb$&lt;span class=&quot;kw&quot;&gt;tick&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;Sys.sleep&lt;/span&gt;(&lt;span class=&quot;fl&quot;&gt;0.01&lt;/span&gt;)

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추가된 코드는 2줄이다.&lt;/p&gt;
&lt;p&gt;우선 첫번째 progress bar 에 대한 사전정보가 담긴 객체 &lt;code&gt;pb&lt;/code&gt; 를 만든다.&lt;br /&gt;
사전정보는 iteration 의 최대값을 넣어준다.&lt;br /&gt;
즉 우리예시의 반복문은 1000회를 반복하므로 total 인자에 1000을 부여한다.&lt;br /&gt;
그렇게 만든 객체 &lt;code&gt;pb&lt;/code&gt; 를 반복문 안에 심어주고 이를 째깍째깍 거릴 수 있도록 &lt;code&gt;tick()&lt;/code&gt; 모듈을 심어준다.&lt;br /&gt;
이것이 가장 기본적인 사용방법이다.&lt;/p&gt;
&lt;p&gt;실행해보면 R console 에 다음과 같이 진행표시줄이 나타나고, 점진적으로 진행되는 에니메이션을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;터미널 에서 실행시킨 결과&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Progressbar_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;R studio 에서 실행시킨 결과&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Progressbar_2.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;추가된 2줄 코드의 문법형태가 Python을 사용하는 것처럼 닮았다.&lt;br /&gt;
R6 Object 라고 설명되어 있는데, 때문에 다양한 특별기능을 자유롭게 조절하여 사용 할 수 있는 듯 하다.&lt;br /&gt;
그 방법에 대해선 &lt;code&gt;?progress_bar&lt;/code&gt; 를 통해 확인할 수 있으며, 예제코드들을 활용하면 상황에 맞게 커스터마이징도 가능할 듯 싶다.&lt;/p&gt;
&lt;p&gt;참고로 터미널 command line, R studio 에선 실험결과 정상적으로 진행표시줄이 보이는데, 다른 환경&lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;에선 진행표시줄이 안보일 수도 있나 보다.&lt;/p&gt;
&lt;hr /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;물론 로드 이전에 패키지의 설치가 되어야 한다. &lt;code&gt;install.packages(&amp;quot;progress&amp;quot;)&lt;/code&gt; 로 가능하다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;내가 쓰고 있는 텍스트에디터 Sublime text 3 에서 R-box 플러그인을 이용한 환경에선 진행표시줄이 나타나지 않았다.&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Sat, 16 Apr 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/04/16/progressbar.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/04/16/progressbar.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 rjson package 의 toJSON(), fromJSON() 함수 알아보기</title>
        <description>&lt;hr /&gt;
&lt;p&gt;JSON 포맷의 데이터를 R에서 읽어 들인 후 가공하기 위해 JSON 형식을 parser 해야 하는 과정이 필요하다고 한다.&lt;br /&gt;
rjson 라는 패키지가 이를 도와주는데 이 안에 있는 함수 &lt;code&gt;toJSON()&lt;/code&gt;, &lt;code&gt;fromJSON()&lt;/code&gt; 2개를 기본적으로 이용하여 실습을 해보겠다.&lt;/p&gt;
&lt;h2 id=&quot;a-준비&quot;&gt;A) 준비&lt;/h2&gt;
&lt;h3 id=&quot;a-1-예제-데이터&quot;&gt;A-1) 예제 데이터&lt;/h3&gt;
&lt;p&gt;실습을 하기 위하여 아래와 같은 JSON 타입의 데이터가 있다고 가정해 보겠다.&lt;br /&gt;
아래의 데이터는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/JSON#.EC.98.88.EC.A0.9C&quot;&gt;JSON 을 설명하는 위키백과&lt;/a&gt;의 예제데이터를 적절히 수정한 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  {
    &amp;quot;Name&amp;quot;: &amp;quot;Test&amp;quot;,
    &amp;quot;Age&amp;quot;: 25,
    &amp;quot;Sex&amp;quot;: &amp;quot;F&amp;quot;,
    &amp;quot;Address&amp;quot;: &amp;quot;Seoul&amp;quot;,
    &amp;quot;Hobby&amp;quot;: &amp;quot;Basketball&amp;quot;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이것을 워킹디렉토리에 &lt;code&gt;test.json&lt;/code&gt; 로 저장하고 이를 R에서 적절하게 사용하기 위해 불러와 보겠다.&lt;br /&gt;
어떠한 텍스트에디터를 이용하던 상관없다, 저장방법은 위의 JSON 형식 텍스트를 복사한 다음 &amp;quot;test.json&amp;quot; 이란 파일명으로 저장만 하면 된다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/rjson_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;나는 Sublime text 3 라는 텍스트 에디터를 이용해 이처럼 저장하였다.&lt;/p&gt;
&lt;h3 id=&quot;a-2-jsonlite-패키지-불러오기&quot;&gt;A-2) jsonlite 패키지 불러오기&lt;/h3&gt;
&lt;p&gt;당연히 rjson 패키지를 불러오는 것이 필요하다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;library&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;rjson&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;b-tojson-fromjson-함수-이용해보기&quot;&gt;B) &lt;code&gt;toJSON()&lt;/code&gt;, &lt;code&gt;fromJSON()&lt;/code&gt; 함수 이용해보기&lt;/h2&gt;
&lt;h3 id=&quot;b-1-fromjson&quot;&gt;B-1) &lt;code&gt;fromJSON()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;우선 &lt;code&gt;fromJSON()&lt;/code&gt; 함수를 알아보자.&lt;br /&gt;
JSON 형 데이터를 R에서 가공할 수 있도록 형태를 변환하여 준다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;data &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fromJSON&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;test.json&amp;quot;&lt;/span&gt;)
data&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [[1]]$Name
## [1] &amp;quot;Test&amp;quot;
## 
## [[1]]$Age
## [1] 25
## 
## [[1]]$Sex
## [1] &amp;quot;F&amp;quot;
## 
## [[1]]$Address
## [1] &amp;quot;Seoul&amp;quot;
## 
## [[1]]$Hobby
## [1] &amp;quot;Basketball&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;(data)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list 형식으로 반환되는데 적절히 data.frame 형태로 변환하여 보면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;dataframe &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;as.data.frame&lt;/span&gt;(data)
dataframe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##   Name Age Sex Address      Hobby
## 1 Test  25   F   Seoul Basketball&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;b-2-tojson&quot;&gt;B-2) &lt;code&gt;toJSON()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;toJSON()&lt;/code&gt; 은 이와 반대의 성격을 가진다.&lt;br /&gt;
R의 객체를 특히 list, data.frame 등을 JSON 형으로 변환시킨다.&lt;br /&gt;
방금만든 &lt;code&gt;dataframe&lt;/code&gt; 객체를 다시 JSON 형태로 바꾸기 위해선,&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;toJSON&lt;/span&gt;(dataframe)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;{\&amp;quot;Name\&amp;quot;:\&amp;quot;Test\&amp;quot;,\&amp;quot;Age\&amp;quot;:25,\&amp;quot;Sex\&amp;quot;:\&amp;quot;F\&amp;quot;,\&amp;quot;Address\&amp;quot;:\&amp;quot;Seoul\&amp;quot;,\&amp;quot;Hobby\&amp;quot;:\&amp;quot;Basketball\&amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;로 하면된다.&lt;/p&gt;
&lt;p&gt;rjson package 말고도 간단히 이용할 수 있는 jsonlite package 도 있는데 이 패키지의 &lt;code&gt;toJSON()&lt;/code&gt; 함수는 pretty 하게 반환하는 기능을 가지고 있다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;jsonlite::&lt;span class=&quot;kw&quot;&gt;toJSON&lt;/span&gt;(dataframe, &lt;span class=&quot;dt&quot;&gt;pretty=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [
##   {
##     &amp;quot;Name&amp;quot;: &amp;quot;Test&amp;quot;,
##     &amp;quot;Age&amp;quot;: 25,
##     &amp;quot;Sex&amp;quot;: &amp;quot;F&amp;quot;,
##     &amp;quot;Address&amp;quot;: &amp;quot;Seoul&amp;quot;,
##     &amp;quot;Hobby&amp;quot;: &amp;quot;Basketball&amp;quot;
##   }
## ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;첫 서두에 있는 예제 데이터와 동일하게 출력된 것을 볼 수 있다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/03/02/rjson_package.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/03/02/rjson_package.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 `replicate()` 함수 소개</title>
        <description>&lt;hr /&gt;
&lt;p&gt;특정 코드를 반복해서 실행하는 방법들은 반복문을 이용하면 간단히 구현가능하다.&lt;br /&gt;
그런데 반복문의 주안점이 만약 반복된 모든 결과들을 저장해야 한다는 것에 있다면 통상적인 반복문에선 오묘한 방법을 통해 이를 구현한다.&lt;/p&gt;
&lt;p&gt;for 문을 이용한 간단한 예시 코드를 보면&lt;/p&gt;
&lt;h3 id=&quot;for문을-이용한-주사위-100회-던지기&quot;&gt;for문을 이용한 주사위 100회 던지기&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;c&lt;/span&gt;()
for(i in &lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)) res[i] &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
res&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 1 5 3 2 6 2 2 5 6 6 2 3 4 1 1 6 1 3 1 5 3 3 3 3 5 3 5 5 3 4 2 1 1 2 1
##  [36] 2 1 3 1 2 2 3 3 4 2 3 1 1 5 1 6 4 3 4 6 2 4 1 5 1 2 4 2 6 3 3 5 6 4 5
##  [71] 5 5 4 2 6 4 3 6 2 1 6 5 6 4 5 4 2 2 4 2 6 3 5 5 4 2 2 2 5 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 코드는 주사위를 100번 던진 후 그 결과를 &lt;code&gt;res&lt;/code&gt; 라는 객체에 벡터형태로 저장하는 코드로 볼 수 있다.&lt;/p&gt;
&lt;p&gt;반복문 방식을 바꿔보겠다.&lt;br /&gt;
위 예시를 &lt;code&gt;apply()&lt;/code&gt; 를 이용해본 코드이다.&lt;/p&gt;
&lt;h3 id=&quot;apply를-이용한-주사위-100회-던지기&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;를 이용한 주사위 100회 던지기&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;matrix&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, function(x) &lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(x, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
res&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 3 1 1 6 4 5 1 2 4 1 2 4 2 4 6 2 5 6 1 1 4 1 2 4 3 4 2 2 5 5 2 6 4 1 3
##  [36] 2 4 2 3 1 6 2 4 6 3 6 3 4 1 4 4 5 4 1 2 4 4 3 1 4 6 3 5 4 4 1 6 1 5 4
##  [71] 2 2 4 1 6 1 4 3 6 5 1 4 3 3 3 1 2 6 4 2 3 4 5 5 5 2 5 1 5 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 두가지 방식의 코드는 한가지 공통점이 있다.&lt;br /&gt;
반복문의 내용이 무엇이 되었던 100번의 반복으로 인해 어떤 무엇인가가 100번 반환될 것이고 이에 대한 저장공간을 사전에 생각하여 준비해야 한다는 것 이다.&lt;br /&gt;
무슨말인지 쉽게 풀어 설명해보자면&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;첫번째 for문 반복문 예제에선 100개의 값이 저장될 &lt;code&gt;res&lt;/code&gt; 라는 빈 벡터를 사전에 준비한 &lt;code&gt;res &amp;lt;- c()&lt;/code&gt; 코드가 눈에 띈다.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;두번째 &lt;code&gt;apply()&lt;/code&gt; 예제에선 일괄함수적용을 위해 1, 2, 3, 4, 5, 6 의 벡터 100개가 열방향으로 bind 된 matrix 를 사전에 준비했고, 이에 대해 무작위로 추출하기위한 &lt;code&gt;sample()&lt;/code&gt; 함수를 일괄 적용했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이처럼 100회 반복의 모든 결과를 어딘가의 담아 두기 위한 사전 설계의 노력이 따로 필요하다.&lt;br /&gt;
분명 정석적으로 이러한 준비는 반드시 필요하며 틀리지 않다.&lt;br /&gt;
문제는 위의 예제처럼 간단한 코드가 아닌 복잡한 상황 일 때 사전준비 과정들은 곱절 높아질 수 있다.&lt;br /&gt;
보통 복잡도는 지수적으로 늘어나기 때문에 이 오묘한 방법이 실전에서 코딩의 비효율로 일어날 수 있다고 생각한다.&lt;/p&gt;
&lt;p&gt;만약 그러한 복잡한 상황일 때,&lt;br /&gt;
위의 예제에들의 로직을 그대로 가지고 있으되 사전준비의 부담을 덜 수 있는 함축된 함수가 있다고 생각하는데 &lt;code&gt;replicate()&lt;/code&gt; 함수 이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;res &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;sample&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))
res&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 2 3 5 4 1 5 6 5 6 3 4 5 3 3 1 2 5 6 2 3 5 4 3 6 4 2 5 5 5 4 4 1 5 4 5
##  [36] 2 5 5 4 5 5 2 5 5 2 1 6 4 2 3 6 1 4 3 1 4 2 6 3 2 1 5 1 4 4 1 3 6 2 5
##  [71] 6 2 1 1 3 4 5 5 4 3 6 1 3 1 1 1 2 4 3 2 5 2 5 2 3 2 4 1 5 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;replicate()&lt;/code&gt; 함수는 반복문의 내용(expr)을 두번째 인자에 부여하고 첫번째 인자에 반복회수를 넣어줌으로써 반복실행된 코드의 결과를 벡터형태로 반환시켜주는 편리한 함수이다.&lt;br /&gt;
사전준비에 대한 로직을 &lt;code&gt;replicate()&lt;/code&gt; 함수가 대신해준다.&lt;br /&gt;
따라서 코드길이도 확실히 줄일 수 있게 된다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Fri, 19 Feb 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/02/19/replicate_function.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/02/19/replicate_function.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 `try()` 함수 소개</title>
        <description>&lt;hr /&gt;
&lt;p&gt;이전에 나는 특정 코드들이 있을 때, 이 코드를 수행하면 에러가 나는지, 나지 않는지 여부를 boolean 값으로 반환하는 그러한 함수를 찾고 있었다. (그보단 이러한 함수를 만들 수 있도록 리소스를 찾아보고 있었다.)&lt;br /&gt;
그러던 중 우연히 알게 된 &lt;code&gt;try()&lt;/code&gt; 함수에 대해 알아보고자 한다.&lt;/p&gt;
&lt;p&gt;아래 코드는 &lt;code&gt;bsid&lt;/code&gt; 라는 environment 객체가 없기 때문에 아래의 코드는 에러를 내어 본 파일의 rmarkdown 랜더링을 막게 될 것이다.&lt;br /&gt;
우선 랜더링(컴파일링)마저 막는 상황을 피하기 위해 코드청크를 &lt;code&gt;eval=F&lt;/code&gt; 로 설정했다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ls&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;envir=&lt;/span&gt;bsdi)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 &lt;code&gt;bsid&lt;/code&gt; 라는 environment 객체가 없는 상황에 위 코드를 실행시키면&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ls(envir=bsdi)
Error in ls(envir = bsdi) : object &amp;#39;bsdi&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;의 에러메세지가 출력된다.&lt;/p&gt;
&lt;h2 id=&quot;try-function&quot;&gt;&lt;code&gt;try()&lt;/code&gt; function&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
  &lt;span class=&quot;kw&quot;&gt;ls&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;envir=&lt;/span&gt;bsdi)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;try()&lt;/code&gt; 함수 안에는 표현식이 들어가는데 이전 예제 코드의 &lt;code&gt;ls(envir=bsdi)&lt;/code&gt; 를 입력하였다.&lt;br /&gt;
&lt;code&gt;ls(envir=bsdi)&lt;/code&gt; 코드는 역시 에러가 반환된다.&lt;br /&gt;
하지만 차이점은 에러를 반환하고도 이후 코드를 계속적으로 수행한다는 차이점을 가지고 있다.&lt;br /&gt;
무슨소리인지 잘 모르겠다면 아래코드를 보면 된다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
  &lt;span class=&quot;kw&quot;&gt;ls&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;envir=&lt;/span&gt;bsdi)
})

&lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Hello R&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;try()&lt;/code&gt; 함수를 쓴 코드 이후의 코드인 &lt;code&gt;print(&amp;quot;Hello R&amp;quot;)&lt;/code&gt; 은 정상적으로 실행되 수행된 것을 볼 수 있다.&lt;br /&gt;
유의할 것은 실제로 위 코드청크에 &lt;code&gt;eval=F&lt;/code&gt; 설정을 주지 않고도 렌더링이 막히지 않았는다는 것이다.&lt;br /&gt;
따라서 에러를 뿜는 코드이더라 하더라도, 그것이 &lt;code&gt;try()&lt;/code&gt; 함수로 감싸지면 계속적으로 수행된다는 것이다.&lt;/p&gt;
&lt;h3 id=&quot;silent-인자&quot;&gt;&lt;code&gt;silent&lt;/code&gt; 인자&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;try()&lt;/code&gt; 함수의 &lt;code&gt;silent&lt;/code&gt; 인자로 command 에 에러가 반환되는 메세지 조차 침묵시킬 수 있다.&lt;br /&gt;
이 인자의 값을 &lt;code&gt;TRUE&lt;/code&gt; 로 설정하면 에러는 silent 시킨다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
  &lt;span class=&quot;kw&quot;&gt;ls&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;envir=&lt;/span&gt;bsdi)
}, &lt;span class=&quot;dt&quot;&gt;silent=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;차이점을 체감하기 위해선 직접 R command 를 수행해볼 필요가 있다.&lt;/p&gt;
&lt;h3 id=&quot;두-줄-의-코드를-try-하되-한줄은-정상-한줄은-에러를-내는-코드로-수정하면&quot;&gt;두 줄 의 코드를 try 하되 한줄은 정상, 한줄은 에러를 내는 코드로 수정하면?&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
  &lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Hello R&amp;quot;&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;# normal code&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;ls&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;envir=&lt;/span&gt;bsdi)     &lt;span class=&quot;co&quot;&gt;# error code&lt;/span&gt;
}, &lt;span class=&quot;dt&quot;&gt;silent=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;첫번째 코드는 정상적으로 문자열 &amp;quot;Hello R&amp;quot; 을 출력시킨다.&lt;br /&gt;
그리고 에러반환 코드 2번째 코드는 반응이 없다.&lt;/p&gt;
&lt;p&gt;순서를 바꾸어 보면?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;expr=&lt;/span&gt;{
  &lt;span class=&quot;kw&quot;&gt;ls&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;envir=&lt;/span&gt;bsdi)     &lt;span class=&quot;co&quot;&gt;# error code&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Hello R&amp;quot;&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;# normal code&lt;/span&gt;
}, &lt;span class=&quot;dt&quot;&gt;silent=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;헛.. 첫번째 코드가 에러를 뿜기 때문에 그 이후 코드인 &lt;code&gt;print(&amp;quot;Hello R&amp;quot;)&lt;/code&gt;는 수행되지 않는것을 볼 수 있다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/02/11/tryfunction.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/02/11/tryfunction.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 Shell command 를 실행하기위한 대안 : `system()` 함수</title>
        <description>&lt;hr /&gt;
&lt;p&gt;(본 글은 Linux, Mac 을 기준으로 작성한 글입니다.)&lt;/p&gt;
&lt;p&gt;Shell command 로 출력되는 것을 R에서 보기 위한 방법은 없을까?&lt;br /&gt;
예를 들어 워킹디렉토리의 파일리스트를 출력하기 위해선 쉘에서 간단히 &lt;code&gt;ls&lt;/code&gt;, 아니면 &lt;code&gt;ls -al&lt;/code&gt; 등으로 참조할 수 있지만 Rstudio 를 사용하고 있는 상황이 아니고선 R command 상황에서 파일리스트를 참조하기는 좀 그렇다.&lt;/p&gt;
&lt;p&gt;굳이 찾아본다면 Shell 의 &lt;code&gt;ls -al&lt;/code&gt; 와 같은 R코드는&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;file.info&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;list.files&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;all.files=&lt;/span&gt;T))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##                  size isdir mode               mtime               ctime
## .                 238  TRUE  755 2016-02-17 13:21:12 2016-02-17 13:21:12
## ..               1360  TRUE  755 2016-02-11 16:50:19 2016-02-11 16:50:19
## .DS_Store        6148 FALSE  644 2016-02-17 12:59:38 2016-02-17 12:59:38
## Rmarkdown.docx  12662 FALSE  644 2016-02-17 13:19:40 2016-02-17 13:19:40
## Rmarkdown.html 795924 FALSE  666 2016-02-08 14:07:00 2016-02-08 14:07:00
## Rmarkdown.md     6975 FALSE  666 2016-02-08 14:07:00 2016-02-08 14:07:00
## Rmarkdown.Rmd    4167 FALSE  755 2016-02-17 13:21:16 2016-02-17 13:21:16
##                              atime uid gid     uname grname
## .              2016-02-17 13:21:16 501  20 lovetoken  staff
## ..             2016-02-17 13:19:41 501  20 lovetoken  staff
## .DS_Store      2016-02-17 12:55:40 501  20 lovetoken  staff
## Rmarkdown.docx 2016-02-17 13:21:16 501  20 lovetoken  staff
## Rmarkdown.html 2016-02-17 13:21:16 501  20 lovetoken  staff
## Rmarkdown.md   2016-02-17 13:21:16 501  20 lovetoken  staff
## Rmarkdown.Rmd  2016-02-17 13:21:16 501  20 lovetoken  staff&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;등을 예시로 할 수 있는데, ... 딱 봐도 마음에 들지 않는다.&lt;/p&gt;
&lt;p&gt;게다가 Rstudio 와 같은 GUI 환경이 아닌 CLI 환경이 정감이 가는 분들이라면 생산성을 추구하고, 마우스를 이용한다는 거 자체를 용납하지 않을 것 인데, 위와 같은 긴 코드는 전혀 공감되지 않는다.&lt;/p&gt;
&lt;p&gt;이처럼 R에서 대체할 수 있는 함수나 코드를 찾기보단, 아예 R내에서 Shell command를 실행할 수 있는 방법을 찾는 것이 합리적이다.&lt;/p&gt;
&lt;p&gt;이것저것 찾아보았는데 &lt;code&gt;system()&lt;/code&gt; 함수를 이용하는 방법이 있어 정리해 본다.&lt;/p&gt;
&lt;h2 id=&quot;a-shell-command-in-r&quot;&gt;A) shell command in r&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;ls -al&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;echo Hello world!&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사용방법은 &lt;code&gt;system()&lt;/code&gt; 함수의 첫번째 인자인 expression 을 Shell command 로 채워 넣어주면 된다.&lt;br /&gt;
아쉽지만 문자열만을 받아들이기 때문에 &amp;quot;&amp;quot; 로 양 옆을 채워야 한다.&lt;br /&gt;
현재글에선 출력결과를 생략하였지만 실제로 R에서 실행시 원하는 출력을 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;a-1-shell-출력물을-r에서-바로-이용하기-위한-interntrue&quot;&gt;A-1) Shell 출력물을 R에서 바로 이용하기 위한 &lt;code&gt;intern=TRUE&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;위의 예제에서 본 출력물을 R 내에서 character 형으로 바로 사용하기 위해선 R의 기본 컨테이너인 vector 로 저장되어야 한다.&lt;br /&gt;
하지만 &lt;code&gt;system()&lt;/code&gt; 함수를 이용한 기본출력은 벡터로 반환되지 않는다.&lt;br /&gt;
출력은 출력일 뿐인 이것을 vector type 으로 반환시키기 위해선 &lt;code&gt;intern=TRUE&lt;/code&gt; 로 설정한다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;ls -al&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;total 1640&amp;quot;                                                        
## [2] &amp;quot;drwxr-xr-x   7 lovetoken  staff     238  2 17 13:21 .&amp;quot;             
## [3] &amp;quot;drwxr-xr-x  40 lovetoken  staff    1360  2 11 16:50 ..&amp;quot;            
## [4] &amp;quot;-rw-r--r--@  1 lovetoken  staff    6148  2 17 12:59 .DS_Store&amp;quot;     
## [5] &amp;quot;-rwxr-xr-x@  1 lovetoken  staff    4167  2 17 13:21 Rmarkdown.Rmd&amp;quot; 
## [6] &amp;quot;-rw-r--r--@  1 lovetoken  staff   12662  2 17 13:19 Rmarkdown.docx&amp;quot;
## [7] &amp;quot;-rw-rw-rw-   1 lovetoken  staff  795924  2  8 14:07 Rmarkdown.html&amp;quot;
## [8] &amp;quot;-rw-rw-rw-   1 lovetoken  staff    6975  2  8 14:07 Rmarkdown.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/lovetoken/Desktop/OneDrive/02_Study/01_Statistic/31_R/11_Rcafe/01_Function/system()&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;echo Hello world!&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello world!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;b-shell-output-을-r과-연동&quot;&gt;B) shell output 을 R과 연동&lt;/h2&gt;
&lt;p&gt;이점을 이용하여 R과 Shell 의 캐미를 만들 수 있을 것 이다.&lt;/p&gt;
&lt;h3 id=&quot;ex1.-r-에서의-hello-와-shell-에서의-r-을-붙여-hello-r-완성시키기&quot;&gt;ex1. R 에서의 &#39;Hello &#39; 와 Shell 에서의 &#39;R!&#39; 을 붙여 &#39;Hello R!&#39; 완성시키기&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;R &amp;lt;-&lt;span class=&quot;st&quot;&gt; &amp;quot;Hello &amp;quot;&lt;/span&gt;
Shell &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;echo R!&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;T)

&lt;span class=&quot;kw&quot;&gt;paste0&lt;/span&gt;(R, Shell)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Hello R!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ex2.-r에서-생성한-규칙적-문자열-데이터들로-폴더-생성하기&quot;&gt;ex2. R에서 생성한 규칙적 문자열 데이터들로 폴더 생성하기&lt;/h3&gt;
&lt;p&gt;R에서 준비된 날짜명칭들을 이용해 Shell &lt;code&gt;mkdir&lt;/code&gt; 명령어와 혼합하여 폴더들을 생성하기.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# before&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;ls -al&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;total 1640&amp;quot;                                                        
## [2] &amp;quot;drwxr-xr-x   7 lovetoken  staff     238  2 17 13:21 .&amp;quot;             
## [3] &amp;quot;drwxr-xr-x  40 lovetoken  staff    1360  2 11 16:50 ..&amp;quot;            
## [4] &amp;quot;-rw-r--r--@  1 lovetoken  staff    6148  2 17 12:59 .DS_Store&amp;quot;     
## [5] &amp;quot;-rwxr-xr-x@  1 lovetoken  staff    4167  2 17 13:21 Rmarkdown.Rmd&amp;quot; 
## [6] &amp;quot;-rw-r--r--@  1 lovetoken  staff   12662  2 17 13:19 Rmarkdown.docx&amp;quot;
## [7] &amp;quot;-rw-rw-rw-   1 lovetoken  staff  795924  2  8 14:07 Rmarkdown.html&amp;quot;
## [8] &amp;quot;-rw-rw-rw-   1 lovetoken  staff    6975  2  8 14:07 Rmarkdown.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# after&lt;/span&gt;
date &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;seq&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;Sys.Date&lt;/span&gt;()-&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;Sys.Date&lt;/span&gt;(), &lt;span class=&quot;dt&quot;&gt;by=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;collapse=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;paste&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;mkdir&amp;quot;&lt;/span&gt;, date) %&amp;gt;%&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;T)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;system&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;ls -al&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;intern=&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;total 1640&amp;quot;                                                        
##  [2] &amp;quot;drwxr-xr-x  18 lovetoken  staff     612  2 17 13:21 .&amp;quot;             
##  [3] &amp;quot;drwxr-xr-x  40 lovetoken  staff    1360  2 11 16:50 ..&amp;quot;            
##  [4] &amp;quot;-rw-r--r--@  1 lovetoken  staff    6148  2 17 12:59 .DS_Store&amp;quot;     
##  [5] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-07&amp;quot;    
##  [6] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-08&amp;quot;    
##  [7] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-09&amp;quot;    
##  [8] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-10&amp;quot;    
##  [9] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-11&amp;quot;    
## [10] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-12&amp;quot;    
## [11] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-13&amp;quot;    
## [12] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-14&amp;quot;    
## [13] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-15&amp;quot;    
## [14] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-16&amp;quot;    
## [15] &amp;quot;drwxr-xr-x   2 lovetoken  staff      68  2 17 13:21 2016-02-17&amp;quot;    
## [16] &amp;quot;-rwxr-xr-x@  1 lovetoken  staff    4167  2 17 13:21 Rmarkdown.Rmd&amp;quot; 
## [17] &amp;quot;-rw-r--r--@  1 lovetoken  staff   12662  2 17 13:19 Rmarkdown.docx&amp;quot;
## [18] &amp;quot;-rw-rw-rw-   1 lovetoken  staff  795924  2  8 14:07 Rmarkdown.html&amp;quot;
## [19] &amp;quot;-rw-rw-rw-   1 lovetoken  staff    6975  2  8 14:07 Rmarkdown.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;c-정리&quot;&gt;C) 정리&lt;/h2&gt;
&lt;p&gt;필자는 Shell 에 대해 완전 초급자여서 즐겨쓰는 명령어 몇 개 이외에 잘 아 는것이 없다.&lt;br /&gt;
따라서 예제도 저 정도의 수준의 예제 외에 생각나는 아이디어가 바닥이 나버렸다. :( 하지만 Shell 의 고수분들은 응용력과 잠재력이 대단할 것인데 R과의 연동된 좋은 아이디어들을 구현할 수 있을 것 같아 감히 &lt;code&gt;system()&lt;/code&gt; 함수를 소개한다.&lt;/p&gt;
&lt;hr /&gt;
</description>
        <pubDate>Mon, 08 Feb 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/02/08/system_function.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/02/08/system_function.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>R에서 Step function model 이용하기</title>
        <description>&lt;hr /&gt;
&lt;p&gt;일반적인 선형회귀분석보다 모델의 해석이 특수하나&lt;br /&gt;
한눈에 이해할 수 있는 모델링 방법인 Step function 을 R에서 구현해보고자 한다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt;(College, &lt;span class=&quot;dt&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ISLR&amp;quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예제로 사용할 데이터는 ISLR 패키지에 내장되어있는 &lt;code&gt;College&lt;/code&gt; 데이터이다.&lt;br /&gt;
미국의 여러 대학교가 관측치이고, 각 대학들의 지원자 수와 각 대학들의 정보를 변수로 가지고 있는 데이터셋이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(College)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;##  Private        Apps           Accept          Enroll       Top10perc    
##  No :212   Min.   :   81   Min.   :   72   Min.   :  35   Min.   : 1.00  
##  Yes:565   1st Qu.:  776   1st Qu.:  604   1st Qu.: 242   1st Qu.:15.00  
##            Median : 1558   Median : 1110   Median : 434   Median :23.00  
##            Mean   : 3002   Mean   : 2019   Mean   : 780   Mean   :27.56  
##            3rd Qu.: 3624   3rd Qu.: 2424   3rd Qu.: 902   3rd Qu.:35.00  
##            Max.   :48094   Max.   :26330   Max.   :6392   Max.   :96.00  
##    Top25perc      F.Undergrad     P.Undergrad         Outstate    
##  Min.   :  9.0   Min.   :  139   Min.   :    1.0   Min.   : 2340  
##  1st Qu.: 41.0   1st Qu.:  992   1st Qu.:   95.0   1st Qu.: 7320  
##  Median : 54.0   Median : 1707   Median :  353.0   Median : 9990  
##  Mean   : 55.8   Mean   : 3700   Mean   :  855.3   Mean   :10441  
##  3rd Qu.: 69.0   3rd Qu.: 4005   3rd Qu.:  967.0   3rd Qu.:12925  
##  Max.   :100.0   Max.   :31643   Max.   :21836.0   Max.   :21700  
##    Room.Board       Books           Personal         PhD        
##  Min.   :1780   Min.   :  96.0   Min.   : 250   Min.   :  8.00  
##  1st Qu.:3597   1st Qu.: 470.0   1st Qu.: 850   1st Qu.: 62.00  
##  Median :4200   Median : 500.0   Median :1200   Median : 75.00  
##  Mean   :4358   Mean   : 549.4   Mean   :1341   Mean   : 72.66  
##  3rd Qu.:5050   3rd Qu.: 600.0   3rd Qu.:1700   3rd Qu.: 85.00  
##  Max.   :8124   Max.   :2340.0   Max.   :6800   Max.   :103.00  
##     Terminal       S.F.Ratio      perc.alumni        Expend     
##  Min.   : 24.0   Min.   : 2.50   Min.   : 0.00   Min.   : 3186  
##  1st Qu.: 71.0   1st Qu.:11.50   1st Qu.:13.00   1st Qu.: 6751  
##  Median : 82.0   Median :13.60   Median :21.00   Median : 8377  
##  Mean   : 79.7   Mean   :14.09   Mean   :22.74   Mean   : 9660  
##  3rd Qu.: 92.0   3rd Qu.:16.50   3rd Qu.:31.00   3rd Qu.:10830  
##  Max.   :100.0   Max.   :39.80   Max.   :64.00   Max.   :56233  
##    Grad.Rate     
##  Min.   : 10.00  
##  1st Qu.: 53.00  
##  Median : 65.00  
##  Mean   : 65.46  
##  3rd Qu.: 78.00  
##  Max.   :118.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;18개 만큼의 변수들을 가지고 있는데, 우리 분석은 종속변수를 지원서 등록횟수인 &lt;code&gt;Apps&lt;/code&gt; 로 하고, 독립변수를 졸업률인 &lt;code&gt;Grad.Rate&lt;/code&gt; 로 제한시켜 두개의 변수만 신경쓰도록 하겠다.&lt;/p&gt;
&lt;h1 id=&quot;a-simple-regression-model&quot;&gt;A) Simple regression model&lt;/h1&gt;
&lt;p&gt;일반적인 단순선형회귀적합을 하게되면 아래와 같이 모델적합이 된다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;reg_fit &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lm&lt;/span&gt;(Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;Grad.Rate, &lt;span class=&quot;dt&quot;&gt;data=&lt;/span&gt;College)
&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(reg_fit)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Apps ~ Grad.Rate, data = College)
## 
## Residuals:
##    Min     1Q Median     3Q    Max 
##  -3764  -2123  -1473    650  44711 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  837.136    541.788   1.545    0.123    
## Grad.Rate     33.064      8.006   4.130 4.02e-05 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 3831 on 775 degrees of freedom
## Multiple R-squared:  0.02154,    Adjusted R-squared:  0.02027 
## F-statistic: 17.06 on 1 and 775 DF,  p-value: 4.019e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;s&lt;/em&gt; = 837.14 + 33.06 × &lt;em&gt;G&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;.&lt;em&gt;R&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;졸업률이 한 단위 증가하면 지원자 수도 33.06회만큼 증가하는 경향을 가진 것으로 회귀적합모델을 볼 때 알 수 있다.&lt;br /&gt;
실제 데이터의 산포와 산출된 회귀적합선을 겹쳐 표현하면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;Grad.Rate, &lt;span class=&quot;dt&quot;&gt;data=&lt;/span&gt;College, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pch=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;21&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(College$Grad.Rate), &lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;predict&lt;/span&gt;(reg_fit)), &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;lwd=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;grid&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/step_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;분명 학교의 졸업률이 높으면 높을수록 대학교의 인기가 높은 것인지 해당학교의 지원자가 많아지는 경향을 plotting 결과물에서 볼 수 있다.&lt;br /&gt;
&lt;code&gt;Grad.Rate&lt;/code&gt; 의 회귀계수 또한 베타계수가 0이라는 귀무가설을 기각시키는 P-value 이다.&lt;/p&gt;
&lt;h1 id=&quot;b-step-function-model&quot;&gt;B) Step function model&lt;/h1&gt;
&lt;p&gt;자 그러면 이제 언급할 Step function model 은 위의 일반적인 선형회귀적합과 무엇의 차이가 있을까?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;step_fit &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;lm&lt;/span&gt;(Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;cut&lt;/span&gt;(Grad.Rate, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;data=&lt;/span&gt;College)
&lt;span class=&quot;kw&quot;&gt;summary&lt;/span&gt;(step_fit)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Apps ~ cut(Grad.Rate, 2), data = College)
## 
## Residuals:
##    Min     1Q Median     3Q    Max 
##  -3322  -2115  -1483    681  44631 
## 
## Coefficients:
##                           Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)                 2494.0      199.7  12.486  &amp;lt; 2e-16 ***
## cut(Grad.Rate, 2)(64,118]    969.1      276.0   3.511 0.000471 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 3842 on 775 degrees of freedom
## Multiple R-squared:  0.01566,    Adjusted R-squared:  0.01439 
## F-statistic: 12.33 on 1 and 775 DF,  p-value: 0.0004714&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lm()&lt;/code&gt; 함수의 formula 인자부분의 독립변수에 해당되는 부분을 보면 &lt;code&gt;cut(Grad.Rate, 2)&lt;/code&gt; 으로 되어있는데 이것의 의미는 &lt;code&gt;Grad.Rate&lt;/code&gt; 변수값들을 두 부분으로 범주화(grouping) 시키겠다는 의미이다.&lt;br /&gt;
어떻게 범주화를 시키느냐? 한쪽은 값이 낮은 그룹, 나머지 한쪽은 값이 높은 그룹으로 이분류가 자동적으로 된다.&lt;br /&gt;
그리고 위에서 출력된 &lt;code&gt;summary(step_fit)&lt;/code&gt; 의 결과물을 이용해 종속변수 &lt;code&gt;Apps&lt;/code&gt; 의 모델링 식을 표현하면 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class=&quot;math display&quot;&gt;&lt;em&gt;A&lt;/em&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;s&lt;/em&gt; = 2494.0 + 969.1 × &lt;em&gt;c&lt;/em&gt;&lt;em&gt;u&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;(&lt;em&gt;G&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;.&lt;em&gt;R&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;, 2)(64, 118]&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;단 위에서 &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;c&lt;/em&gt;&lt;em&gt;u&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;(&lt;em&gt;G&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;.&lt;em&gt;R&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;, 2)(64, 118]&lt;/span&gt; 의 값은 &lt;code&gt;Grad.Rate&lt;/code&gt; 값이 &lt;span class=&quot;math inline&quot;&gt;64 &amp;lt; &lt;em&gt;G&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;d&lt;/em&gt;.&lt;em&gt;R&lt;/em&gt;&lt;em&gt;a&lt;/em&gt;&lt;em&gt;t&lt;/em&gt;&lt;em&gt;e&lt;/em&gt; ≤ 118&lt;/span&gt; 일 때 1, 아니면 0의 의미이다.&lt;/p&gt;
&lt;p&gt;실제 데이터 산포와 &lt;code&gt;step_fit&lt;/code&gt; 적합선을 겹처 표현해보면&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;Grad.Rate, &lt;span class=&quot;dt&quot;&gt;data=&lt;/span&gt;College, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pch=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;21&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(College$Grad.Rate), &lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;predict&lt;/span&gt;(step_fit)), &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;lwd=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;grid&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/step_2.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Grad.Rate 의 값이 낮은 그룹, 즉 졸업률이 64% 이하인 그룹은 2493.99회로, 64% 이상인 그룹은 3463.13회로 예측이 되는 모델인 것이다.&lt;/p&gt;
&lt;p&gt;이처럼 모델의 형태가 계단(Step)의 형태로 적합 시키며 독립변수의 구간을 계단처럼 구분지은후 각 그룹구간별 종속변수의 값을 예측하게 되는 특성을 가진다.&lt;/p&gt;
&lt;p&gt;step function model 을 구현하기 위한 방법은 위의 예제처럼 R에서 &lt;code&gt;cut()&lt;/code&gt; 함수를 통해 간단히 구현할 수 있다.&lt;br /&gt;
&lt;code&gt;lm()&lt;/code&gt; 함수를 이용한 적합은 그대로 두고, formula 인자부분만 알맞게 조정하면 되는데&lt;br /&gt;
범주화를 시키고자 하는 독립변수에 &lt;code&gt;cut()&lt;/code&gt; 함수를 씌우고 범주화 개수를 지정시키면 된다. (더 특수하게 범주화시키고자 한다면 &lt;code&gt;cut()&lt;/code&gt; 함수의 도움말을 이용해 응용해 볼 수도 있겠다)&lt;/p&gt;
&lt;h2 id=&quot;b-1-example-step-function-model&quot;&gt;B-1) Example step function model&lt;/h2&gt;
&lt;p&gt;2개가 아닌 3개의 그룹으로 나누어 step function 적합한 경우의 코드 및 결과이다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span class=&quot;co&quot;&gt;# using update() function&lt;/span&gt;
step_fit3 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;(step_fit, Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;cut&lt;/span&gt;(Grad.Rate, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;))

&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;Grad.Rate, &lt;span class=&quot;dt&quot;&gt;data=&lt;/span&gt;College, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pch=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;21&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(College$Grad.Rate), &lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;predict&lt;/span&gt;(step_fit3)), &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;lwd=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;grid&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/step_3.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;이번엔 4개로 해보면?&lt;br /&gt;
다음과 같다.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode r&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;step_fit4 &amp;lt;-&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;update&lt;/span&gt;(step_fit, Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;cut&lt;/span&gt;(Grad.Rate, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;))

&lt;span class=&quot;kw&quot;&gt;plot&lt;/span&gt;(Apps ~&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;Grad.Rate, &lt;span class=&quot;dt&quot;&gt;data=&lt;/span&gt;College, &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;pch=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;21&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(College$Grad.Rate), &lt;span class=&quot;kw&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;predict&lt;/span&gt;(step_fit4)), &lt;span class=&quot;dt&quot;&gt;col=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;lwd=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;grid&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/step_4.png&quot; /&gt;
&lt;/figure&gt;
&lt;hr /&gt;
</description>
        <pubDate>Mon, 25 Jan 2016 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2016/01/25/Step_function_modeling.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2016/01/25/Step_function_modeling.html</guid>
        
        
        <category>R</category>
        
      </item>
    
      <item>
        <title>Imitation game</title>
        <description>&lt;hr /&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/Imitation_game_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;영화 &lt;a href=&quot;http://theimitationgamemovie.com/&quot;&gt;이미테이션 게임&lt;/a&gt;을 시작으로 요즘 컴퓨터에 관련된 도서들에 관심을 가지기 시작했다.&lt;br /&gt;
나는 독서와 거리가 매우 멀었고, 대학 전공서적류 외에는 지금껏 특별하게 독서하는 행위의 누적시간량이 심각할&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; 정도로 적었다.&lt;/p&gt;
&lt;p&gt;사실 독서라는 것이 많은 사람들에게 권장되고 중요한 것 이라는 건 수도 없이 들어왔다.&lt;br /&gt;
하지만 솔직하게 말해서 흥미가 없다면 정작 본인이 등을 돌리게 된다.&lt;br /&gt;
나는 애초에 어려운 것들은 매우 싫어해서 단순화 하는것을 좋아하고 쉽게 풀어서 이해시켜주는 스토리텔링을 좋아한다.&lt;br /&gt;
그렇기 때문에 솜씨 좋고 기교있는 단어들이 조합된 장문의 글들은 완벽하게 이해하지 못했고&lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;, 사전적 정의와 같은 단순 명료한 요약글만을 보고 넘기는 것이 습관화 되었으며, 더 나아가 글로만 채워져 있는 도서보단 그림과 삽화가 많이 들어간 책이나 아니면 순도 100% 삽화가 되어있는 만화책, 동영상의 매체를 더 선호하였다. (지금도 선호한다.)&lt;/p&gt;
&lt;p&gt;여하튼 이러한 특성을 가진 나는 단순화에 대한 집착이 강했다.&lt;br /&gt;
단순화는 노력을 최소로 하고 싶어하는 인간의 본능이라는 것이 첫번째이고, 두번째로 단순화를 끝내야 생각의 정리정돈이 되어 가치가 있는 정보로 차곡차곡 쌓인다는 성취감이 느껴졌기 때문이다.&lt;/p&gt;
&lt;p&gt;그런데 지금껏 단순화를 시도하면서 한계가 느껴졌다.&lt;br /&gt;
도저히 단순화가 안되는 범위의 것들이 있다는 걸 깨닫게 되면서 많은 고민들이 생겼다.&lt;br /&gt;
이 범위에 있는 것들은 워낙 방대하고 포괄적이다 보니 남들에게 쉽게 스토리텔링하기가 불가능에 가까운 부피를 가진다는 특성이 있다.&lt;br /&gt;
이것을 지금껏 행해왔던 단순화하여 가치가 있는 정보로 내 머리에 담기 위해 단순화의 역방향을 걸어보고 있는 시점인 것 같다.&lt;/p&gt;
&lt;p&gt;어느새부터인가 나는 단순화를 하기 위한 도구를 찾게 되었다.&lt;br /&gt;
여러 가능성을 가진 도구를 발견하고 탐색하였으며, 이중에 가장 효과적이고 실현가능성 &amp;amp; 잠재력이 높은 도구는 컴퓨터로 생각되었다.&lt;br /&gt;
이때부터 컴퓨터 공부를 관심을 가지고 시작하였고, 컴퓨터 공부중에 첫번째 계단이 프로그래밍이였다.&lt;/p&gt;
&lt;p&gt;프로그래밍 자체는 단순화를 좋아하는 나에게 있어 상당히 어울렸다.&lt;br /&gt;
무엇보다 융통성이 제로에 가까운 딱딱한 컴퓨터 언어는 왠지 나에게 있어 격한 공감을 불러왔다.&lt;br /&gt;
언어중 이렇게 객관적이고 무뚝뚝한(?) 언어는 본적이 없었다.&lt;br /&gt;
예를 들어 내가 아직도 섭렵하지 못하고 있는 국어문제나 토익문제의 5지선다 중 아무리 머리를 굴려봐도 2~3개의 문항중 무엇을 선택하여야 할지 막막해하는 자신을 볼 수 있었다.&lt;br /&gt;
하지만 컴퓨터 언어는 머리를 최대한 굴리면 5지선다중 1개의 문항을 확신하여 답안지에 작성할 수 있었다.&lt;br /&gt;
따라서 프로그래밍 자체에 대한 공부는 즐겁고 비교적 적은시간안에 성취하였다.&lt;/p&gt;
&lt;p&gt;두번째 계단은 Minimal working example 에 대한 구현이다.&lt;br /&gt;
프로그래밍을 공부한 것을 이용해 간단한 예제를 구현하는 것은 실로 엄청난 성취감을 느끼게 하였다.&lt;br /&gt;
뭐든지 가능할 것 같은 말도안되는 이상까지 꿈꾸며 약간의 허황된 자신감이 생겼다.&lt;/p&gt;
&lt;p&gt;그런데 세번째 계단에서 숨이 턱 막혔다.&lt;br /&gt;
정작 내가 추구하던 복잡한 것을 단순화하는 건 두번째 계단이었던 Minimal working example 에 대한 구현의 트레이닝으로 얼마든지 해결할 수 있다고 생각했었다.&lt;br /&gt;
하지만 숨이 턱 막히고 나서 나름대로 내린 결론은 복잡한걸 단순화 하기에 앞서 복잡함의 내면을 철저하게 모두 이해하여야 한다는 것이다.&lt;/p&gt;
&lt;p&gt;요즘들어 엘런튜링을 시작해 리누스 토르발스와 같은 위인들은 어떻게 이러한 문제들을 해결하려고 노력하였는지 궁금해 하며 독서를 시작하게 되었다.&lt;br /&gt;
그리고 도구를 더 격렬하게 찾고 갈망하기 시작하였다.&lt;br /&gt;
그런데 잠깐, 이상하게도 이러한 과정을 겪게되다보니 현 나는&lt;br /&gt;
아까도 말했던 단순화의 역방향을 걷고 있더라..&lt;/p&gt;
&lt;p&gt;주저리주저리 말주변이 없이 글을 작성한 거 같은데 이글의 결론을 정리하면&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;독서는 필요했다(더라.)&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;협업이 절실하게 필요하더라.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;주변의 연륜이 있는 지인분왈, 결국 자네가 마지막에 찾게될 Key는 &#39;사람&#39;과 &#39;인문학적 소양&#39; 이라고 하시더라.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;마지막으로 알면 알수록 부족한 것을 뼈저리~~ 느끼게 되더라.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;본인이 자신에 대해 심각할 정도라고 생각한 바를 적은 것은 이글을 쓴 최근의 시기에 깨닫기 때문에 이렇게 작성하는것이라고 본다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;어찌보면 &amp;quot;이해를 못한것&amp;quot;보다, &amp;quot;이해를 하려고 노력하지 않았다&amp;quot; 라는게 옳은 것 같다.&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Mon, 07 Dec 2015 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/diary/2015/12/07/Imitation_game.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/diary/2015/12/07/Imitation_game.html</guid>
        
        
        <category>Diary</category>
        
      </item>
    
      <item>
        <title>Amazon Web Service 를 이용한 공동 사용 Rstudio Server 환경구축</title>
        <description>&lt;hr /&gt;
&lt;p&gt;Amazon Web Service (AWS) 를 이용하여 미리 구축된 Rstudio Server AMI &lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; 를 배포해주는 &lt;a href=&quot;http://www.louisaslett.com/&quot;&gt;사이트&lt;/a&gt;가 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.louisaslett.com&quot; class=&quot;uri&quot;&gt;http://www.louisaslett.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 AMI를 이용해 직접 여러대의 Rstudio Server 를 손쉽게 구축시킬 수 있다.&lt;/p&gt;
&lt;p&gt;관련된 정보는 &lt;a href=&quot;https://www.youtube.com/watch?v=NQu3ugUkYTk&quot;&gt;아래링크&lt;/a&gt;를 통해 참고하여 알게 되었고 튜토리얼 형태로 이용할 수 있는 방법에 대한 영상까지 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=NQu3ugUkYTk&quot;&gt;Brief guide about Rstudio Server&#39;s Web interface on AWS : https://www.youtube.com/watch?v=NQu3ugUkYTk&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/NQu3ugUkYTk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;AWS 를 프리티어로 공짜로 이용하던 이전시절 이영상을 보고 그대로 따라하여 Rstudio Server 를 구축 시켜 봤었다.&lt;br /&gt;
등록되는 도메인을 통해 들어간 후&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ID : rstudio&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;P.W : rstudio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;로 로그인하여 자유자재로 웹에서 사용할 수 있게 된다.&lt;br /&gt;
물론 초기 로그인시 아이디와 패스워드는 저렇지만 추후에 다른 패스워드로, 그리고 다른 아이디를 만들어 사용할 수도 있겠다.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/AWSAMI-1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;실질적으로 사용하고자 한다면 AWS EC2 사용 과금을 고려해야하며,&lt;br /&gt;
AWS 프리티어 계정기준 t2.micro 와 같은 최저 사양으로 인스턴스를 활성화 시킨다면&lt;br /&gt;
성능, 속도측면에서 기대하지 않는것이 좋을것이다.&lt;/p&gt;
&lt;p&gt;하지만 간편하게 원격으로 R 을 실행할 수도 있고, 소셜코딩이 가능할 수도 있겠으며 간편한 서버증설 등등의&lt;br /&gt;
유용하게 사용할 수 있는 방법은 무궁무진 할 것으로 생각된다.&lt;/p&gt;
&lt;hr /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;Amazon Machine Image 의 약어로 어떤 소프트웨어나 환경설정을 이미지화 하여 그대로 재활용할 수 있는 템플릿이다.&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
        <pubDate>Wed, 25 Mar 2015 00:00:00 +0900</pubDate>
        <link>https://lovetoken.github.io/r/2015/03/25/RstudioServer_using_AWSAMI.html</link>
        <guid isPermaLink="true">https://lovetoken.github.io/r/2015/03/25/RstudioServer_using_AWSAMI.html</guid>
        
        
        <category>R</category>
        
      </item>
    
  </channel>
</rss>
